// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2/log"
	"micros-worker/cmd"
	"micros-worker/internal/biz"
	"micros-worker/internal/conf"
	"micros-worker/internal/data"
	"micros-worker/internal/server"
	"micros-worker/internal/service"
	"micros-worker/internal/worker"
	"micros-worker/internal/workflow"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*cmd.WorkerApp, func(), error) {
	db, cleanup, err := data.NewGormDb(confData)
	if err != nil {
		return nil, nil, err
	}
	mongoDb, cleanup2, err := data.NewMongoDb(confData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	temporalClient, cleanup3, err := data.NewTemporalClient(confData)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rdb, cleanup4, err := data.NewRedisClient(confData)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sftpClientPool, cleanup5, err := data.NewSftpClientPool(confData)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dataData := data.NewData(db, mongoDb, temporalClient, rdb, sftpClientPool, confData)
	contentRepo := data.NewContentRepo(dataData, logger)
	contentUsecase := biz.NewContentUsecase(contentRepo, logger)
	contentSyncWorkflow := workflow.NewContentSyncWorkflow(contentUsecase, dataData)
	commonNoticeRepo := data.NewNoticeRepo(dataData, logger)
	commonNoticeUsecase := biz.NewCommonNoticeUsecase(commonNoticeRepo, logger)
	commonNoticeWorkflow := workflow.NewCommonNoticeWorkflow(commonNoticeUsecase, dataData)
	v, err := worker.NewWorkers(contentSyncWorkflow, commonNoticeWorkflow)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	commonNoticeService := service.NewCommonNoticeService(logger, dataData, commonNoticeWorkflow, commonNoticeUsecase)
	grpcServer := server.NewGRPCServer(confServer, logger, commonNoticeService)
	httpServer := server.NewHTTPServer(confServer, logger, commonNoticeService)
	app := newApp(logger, grpcServer, httpServer)
	workerApp := newWorkerApp(v, app, logger)
	return workerApp, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
