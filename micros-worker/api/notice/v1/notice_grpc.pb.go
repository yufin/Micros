// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: api/notice/v1/notice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommonNotice_PubNoticeByWechatBotMarkdown_FullMethodName = "/notice.v1.CommonNotice/PubNoticeByWechatBotMarkdown"
	CommonNotice_PubNoticeByWechatBotText_FullMethodName     = "/notice.v1.CommonNotice/PubNoticeByWechatBotText"
	CommonNotice_SaveSenderConfigWechatBot_FullMethodName    = "/notice.v1.CommonNotice/SaveSenderConfigWechatBot"
)

// CommonNoticeClient is the client API for CommonNotice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonNoticeClient interface {
	// Sends a greeting
	PubNoticeByWechatBotMarkdown(ctx context.Context, in *PubNoticeByWechatBotMarkdownReq, opts ...grpc.CallOption) (*PubNoticeResp, error)
	PubNoticeByWechatBotText(ctx context.Context, in *PubNoticeByWechatBotTextReq, opts ...grpc.CallOption) (*PubNoticeResp, error)
	SaveSenderConfigWechatBot(ctx context.Context, in *SaveSenderConfigWechatBotReq, opts ...grpc.CallOption) (*SaveConfigResp, error)
}

type commonNoticeClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonNoticeClient(cc grpc.ClientConnInterface) CommonNoticeClient {
	return &commonNoticeClient{cc}
}

func (c *commonNoticeClient) PubNoticeByWechatBotMarkdown(ctx context.Context, in *PubNoticeByWechatBotMarkdownReq, opts ...grpc.CallOption) (*PubNoticeResp, error) {
	out := new(PubNoticeResp)
	err := c.cc.Invoke(ctx, CommonNotice_PubNoticeByWechatBotMarkdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonNoticeClient) PubNoticeByWechatBotText(ctx context.Context, in *PubNoticeByWechatBotTextReq, opts ...grpc.CallOption) (*PubNoticeResp, error) {
	out := new(PubNoticeResp)
	err := c.cc.Invoke(ctx, CommonNotice_PubNoticeByWechatBotText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonNoticeClient) SaveSenderConfigWechatBot(ctx context.Context, in *SaveSenderConfigWechatBotReq, opts ...grpc.CallOption) (*SaveConfigResp, error) {
	out := new(SaveConfigResp)
	err := c.cc.Invoke(ctx, CommonNotice_SaveSenderConfigWechatBot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonNoticeServer is the server API for CommonNotice service.
// All implementations must embed UnimplementedCommonNoticeServer
// for forward compatibility
type CommonNoticeServer interface {
	// Sends a greeting
	PubNoticeByWechatBotMarkdown(context.Context, *PubNoticeByWechatBotMarkdownReq) (*PubNoticeResp, error)
	PubNoticeByWechatBotText(context.Context, *PubNoticeByWechatBotTextReq) (*PubNoticeResp, error)
	SaveSenderConfigWechatBot(context.Context, *SaveSenderConfigWechatBotReq) (*SaveConfigResp, error)
	mustEmbedUnimplementedCommonNoticeServer()
}

// UnimplementedCommonNoticeServer must be embedded to have forward compatible implementations.
type UnimplementedCommonNoticeServer struct {
}

func (UnimplementedCommonNoticeServer) PubNoticeByWechatBotMarkdown(context.Context, *PubNoticeByWechatBotMarkdownReq) (*PubNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubNoticeByWechatBotMarkdown not implemented")
}
func (UnimplementedCommonNoticeServer) PubNoticeByWechatBotText(context.Context, *PubNoticeByWechatBotTextReq) (*PubNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubNoticeByWechatBotText not implemented")
}
func (UnimplementedCommonNoticeServer) SaveSenderConfigWechatBot(context.Context, *SaveSenderConfigWechatBotReq) (*SaveConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSenderConfigWechatBot not implemented")
}
func (UnimplementedCommonNoticeServer) mustEmbedUnimplementedCommonNoticeServer() {}

// UnsafeCommonNoticeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonNoticeServer will
// result in compilation errors.
type UnsafeCommonNoticeServer interface {
	mustEmbedUnimplementedCommonNoticeServer()
}

func RegisterCommonNoticeServer(s grpc.ServiceRegistrar, srv CommonNoticeServer) {
	s.RegisterService(&CommonNotice_ServiceDesc, srv)
}

func _CommonNotice_PubNoticeByWechatBotMarkdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubNoticeByWechatBotMarkdownReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonNoticeServer).PubNoticeByWechatBotMarkdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonNotice_PubNoticeByWechatBotMarkdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonNoticeServer).PubNoticeByWechatBotMarkdown(ctx, req.(*PubNoticeByWechatBotMarkdownReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonNotice_PubNoticeByWechatBotText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubNoticeByWechatBotTextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonNoticeServer).PubNoticeByWechatBotText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonNotice_PubNoticeByWechatBotText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonNoticeServer).PubNoticeByWechatBotText(ctx, req.(*PubNoticeByWechatBotTextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonNotice_SaveSenderConfigWechatBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSenderConfigWechatBotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonNoticeServer).SaveSenderConfigWechatBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonNotice_SaveSenderConfigWechatBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonNoticeServer).SaveSenderConfigWechatBot(ctx, req.(*SaveSenderConfigWechatBotReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonNotice_ServiceDesc is the grpc.ServiceDesc for CommonNotice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonNotice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notice.v1.CommonNotice",
	HandlerType: (*CommonNoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PubNoticeByWechatBotMarkdown",
			Handler:    _CommonNotice_PubNoticeByWechatBotMarkdown_Handler,
		},
		{
			MethodName: "PubNoticeByWechatBotText",
			Handler:    _CommonNotice_PubNoticeByWechatBotText_Handler,
		},
		{
			MethodName: "SaveSenderConfigWechatBot",
			Handler:    _CommonNotice_SaveSenderConfigWechatBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/notice/v1/notice.proto",
}
