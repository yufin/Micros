// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.20.3
// source: api/notice/v1/notice.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCommonNoticePubNoticeByWechatBotMarkdown = "/notice.v1.CommonNotice/PubNoticeByWechatBotMarkdown"
const OperationCommonNoticePubNoticeByWechatBotText = "/notice.v1.CommonNotice/PubNoticeByWechatBotText"
const OperationCommonNoticeSaveSenderConfigWechatBot = "/notice.v1.CommonNotice/SaveSenderConfigWechatBot"

type CommonNoticeHTTPServer interface {
	// PubNoticeByWechatBotMarkdown Sends a greeting
	PubNoticeByWechatBotMarkdown(context.Context, *PubNoticeByWechatBotMarkdownReq) (*PubNoticeResp, error)
	PubNoticeByWechatBotText(context.Context, *PubNoticeByWechatBotTextReq) (*PubNoticeResp, error)
	SaveSenderConfigWechatBot(context.Context, *SaveSenderConfigWechatBotReq) (*SaveConfigResp, error)
}

func RegisterCommonNoticeHTTPServer(s *http.Server, srv CommonNoticeHTTPServer) {
	r := s.Route("/")
	r.POST("/notice/pub/wechat-bot/markdown", _CommonNotice_PubNoticeByWechatBotMarkdown0_HTTP_Handler(srv))
	r.POST("/notice/pub/wechat-bot/text", _CommonNotice_PubNoticeByWechatBotText0_HTTP_Handler(srv))
	r.POST("/notice/config/wechat-bot", _CommonNotice_SaveSenderConfigWechatBot0_HTTP_Handler(srv))
}

func _CommonNotice_PubNoticeByWechatBotMarkdown0_HTTP_Handler(srv CommonNoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PubNoticeByWechatBotMarkdownReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommonNoticePubNoticeByWechatBotMarkdown)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PubNoticeByWechatBotMarkdown(ctx, req.(*PubNoticeByWechatBotMarkdownReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PubNoticeResp)
		return ctx.Result(200, reply)
	}
}

func _CommonNotice_PubNoticeByWechatBotText0_HTTP_Handler(srv CommonNoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PubNoticeByWechatBotTextReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommonNoticePubNoticeByWechatBotText)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PubNoticeByWechatBotText(ctx, req.(*PubNoticeByWechatBotTextReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PubNoticeResp)
		return ctx.Result(200, reply)
	}
}

func _CommonNotice_SaveSenderConfigWechatBot0_HTTP_Handler(srv CommonNoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveSenderConfigWechatBotReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommonNoticeSaveSenderConfigWechatBot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveSenderConfigWechatBot(ctx, req.(*SaveSenderConfigWechatBotReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveConfigResp)
		return ctx.Result(200, reply)
	}
}

type CommonNoticeHTTPClient interface {
	PubNoticeByWechatBotMarkdown(ctx context.Context, req *PubNoticeByWechatBotMarkdownReq, opts ...http.CallOption) (rsp *PubNoticeResp, err error)
	PubNoticeByWechatBotText(ctx context.Context, req *PubNoticeByWechatBotTextReq, opts ...http.CallOption) (rsp *PubNoticeResp, err error)
	SaveSenderConfigWechatBot(ctx context.Context, req *SaveSenderConfigWechatBotReq, opts ...http.CallOption) (rsp *SaveConfigResp, err error)
}

type CommonNoticeHTTPClientImpl struct {
	cc *http.Client
}

func NewCommonNoticeHTTPClient(client *http.Client) CommonNoticeHTTPClient {
	return &CommonNoticeHTTPClientImpl{client}
}

func (c *CommonNoticeHTTPClientImpl) PubNoticeByWechatBotMarkdown(ctx context.Context, in *PubNoticeByWechatBotMarkdownReq, opts ...http.CallOption) (*PubNoticeResp, error) {
	var out PubNoticeResp
	pattern := "/notice/pub/wechat-bot/markdown"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommonNoticePubNoticeByWechatBotMarkdown))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommonNoticeHTTPClientImpl) PubNoticeByWechatBotText(ctx context.Context, in *PubNoticeByWechatBotTextReq, opts ...http.CallOption) (*PubNoticeResp, error) {
	var out PubNoticeResp
	pattern := "/notice/pub/wechat-bot/text"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommonNoticePubNoticeByWechatBotText))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommonNoticeHTTPClientImpl) SaveSenderConfigWechatBot(ctx context.Context, in *SaveSenderConfigWechatBotReq, opts ...http.CallOption) (*SaveConfigResp, error) {
	var out SaveConfigResp
	pattern := "/notice/config/wechat-bot"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommonNoticeSaveSenderConfigWechatBot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
