// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"micros-api/internal/biz"
	"micros-api/internal/conf"
	"micros-api/internal/data"
	"micros-api/internal/server"
	"micros-api/internal/service"
	service2 "micros-api/internal/service/dw/v2"
	"micros-api/internal/service/rc/v2"
	"micros-api/internal/service/rc/v3"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dbs, err := data.NewDbs(confData)
	if err != nil {
		return nil, nil, err
	}
	natsWrap, err := data.NewNatsConn(confData)
	if err != nil {
		return nil, nil, err
	}
	neoCli, err := data.NewNeoCli(confData)
	if err != nil {
		return nil, nil, err
	}
	minioClient, err := data.NewMinioClient(confData)
	if err != nil {
		return nil, nil, err
	}
	mgoCli, err := data.NewMgoCli(confData)
	if err != nil {
		return nil, nil, err
	}
	clientConn, cleanup, err := data.NewGrpcConn(confData)
	if err != nil {
		return nil, nil, err
	}
	dwdataServiceClient := data.NewDwdataServiceClient(clientConn)
	dataData, cleanup2, err := data.NewData(logger, dbs, natsWrap, neoCli, minioClient, mgoCli, dwdataServiceClient)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	rcProcessedContentRepo := data.NewRcProcessedContentRepo(dataData, logger)
	rcProcessedContentUsecase := biz.NewRcProcessedContentUsecase(rcProcessedContentRepo, logger)
	rcOriginContentRepo := data.NewRcOriginContentRepo(dataData, logger)
	rcOriginContentUsecase := biz.NewRcOriginContentUsecase(rcOriginContentRepo, logger)
	rcDependencyDataRepo := data.NewRcDependencyDataRepo(dataData, logger)
	rcDependencyDataUsecase := biz.NewRcDependencyDataUsecase(rcDependencyDataRepo, logger)
	ossMetadataRepo := data.NewOssMetadataRepo(dataData, logger)
	ossMetadataUsecase := biz.NewOssMetadataUsecase(ossMetadataRepo, logger)
	rcReportOssRepo := data.NewRcReportOssRepo(dataData, logger)
	rcReportOssUsecase := biz.NewRcReportOssUsecase(rcReportOssRepo, logger)
	rcDecisionFactorRepo := data.NewRcDecisionFactorRepo(dataData, logger)
	rcDecisionFactorUsecase := biz.NewRcDecisionFactorUsecase(rcDecisionFactorRepo, logger)
	rcServiceServicer := service.NewRcServiceServicer(rcProcessedContentUsecase, rcOriginContentUsecase, rcDependencyDataUsecase, ossMetadataUsecase, rcReportOssUsecase, rcDecisionFactorUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, rcServiceServicer, logger)
	mgoRcRepo := data.NewMgoRcRepo(dataData, logger)
	mgoRcUsecase := biz.NewMgoRcUsecase(mgoRcRepo, logger)
	v2RcServiceServicer := v2.NewRcServiceServicer(rcProcessedContentUsecase, rcOriginContentUsecase, rcDependencyDataUsecase, ossMetadataUsecase, rcReportOssUsecase, mgoRcUsecase, logger)
	v3RcServiceServicer := v3.NewRcServiceServicer(rcProcessedContentUsecase, rcOriginContentUsecase, rcDependencyDataUsecase, ossMetadataUsecase, rcReportOssUsecase, rcDecisionFactorUsecase, mgoRcUsecase, logger)
	rcRdmResultRepo := data.NewRcRdmResultRepo(dataData, logger)
	rcRdmResultUsecase := biz.NewRcRdmResultUsecase(rcRdmResultRepo, logger)
	rcRdmResDetailRepo := data.NewRcRdmResDetailRepo(dataData, logger)
	rcRdmResDetailUsecase := biz.NewRcRdmResDetailUsecase(rcRdmResDetailRepo, logger)
	rcRdmServiceServicer := service.NewRcRdmServiceServicer(rcRdmResultUsecase, rcRdmResDetailUsecase, rcDependencyDataUsecase, logger)
	graphRepo := data.NewGraphRepo(dataData, logger)
	graphUsecase := biz.NewGraphUsecase(graphRepo, logger)
	treeGraphServiceServicer := service.NewTreeGraphServiceServicer(graphUsecase, logger)
	netGraphServiceServicer := service.NewNetGraphServiceServicer(graphUsecase, logger)
	dwEnterpriseRepo := data.NewDwEnterpriseRepo(dataData, logger)
	dwEnterpriseUsecase := biz.NewDwEnterpriseUsecase(dwEnterpriseRepo, logger)
	dwServiceServicer := service2.NewDwServiceServicer(dwEnterpriseUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, dataData, confData, rcServiceServicer, v2RcServiceServicer, v3RcServiceServicer, rcRdmServiceServicer, treeGraphServiceServicer, netGraphServiceServicer, dwServiceServicer, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
