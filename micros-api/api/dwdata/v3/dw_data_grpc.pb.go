// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: api/dwdata/v3/dw_data.proto

package dwdataV3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DwdataService_GetUscIdByEnterpriseName_FullMethodName           = "/api.dwdata.v3.DwdataService/GetUscIdByEnterpriseName"
	DwdataService_GetEnterpriseInfo_FullMethodName                  = "/api.dwdata.v3.DwdataService/GetEnterpriseInfo"
	DwdataService_GetEntEquityTransparency_FullMethodName           = "/api.dwdata.v3.DwdataService/GetEntEquityTransparency"
	DwdataService_GetEntEquityTransparencyConclusion_FullMethodName = "/api.dwdata.v3.DwdataService/GetEntEquityTransparencyConclusion"
	DwdataService_GetEntShareholders_FullMethodName                 = "/api.dwdata.v3.DwdataService/GetEntShareholders"
	DwdataService_GetEntInvestment_FullMethodName                   = "/api.dwdata.v3.DwdataService/GetEntInvestment"
	DwdataService_GetEntFinancing_FullMethodName                    = "/api.dwdata.v3.DwdataService/GetEntFinancing"
	DwdataService_GetEntBranches_FullMethodName                     = "/api.dwdata.v3.DwdataService/GetEntBranches"
	DwdataService_GetCaseRegistrationInfo_FullMethodName            = "/api.dwdata.v3.DwdataService/GetCaseRegistrationInfo"
	DwdataService_GetForeclosureDisposition_FullMethodName          = "/api.dwdata.v3.DwdataService/GetForeclosureDisposition"
	DwdataService_GetExecutive_FullMethodName                       = "/api.dwdata.v3.DwdataService/GetExecutive"
	DwdataService_GetHistoricalExecutive_FullMethodName             = "/api.dwdata.v3.DwdataService/GetHistoricalExecutive"
	DwdataService_GetEquityFrozen_FullMethodName                    = "/api.dwdata.v3.DwdataService/GetEquityFrozen"
	DwdataService_GetHighConsumptionRestriction_FullMethodName      = "/api.dwdata.v3.DwdataService/GetHighConsumptionRestriction"
	DwdataService_GetCourtAnnouncement_FullMethodName               = "/api.dwdata.v3.DwdataService/GetCourtAnnouncement"
	DwdataService_GetEnterpriseManagerInfo_FullMethodName           = "/api.dwdata.v3.DwdataService/GetEnterpriseManagerInfo"
	DwdataService_GetDiscreditedDebtor_FullMethodName               = "/api.dwdata.v3.DwdataService/GetDiscreditedDebtor"
	DwdataService_GetJudicialStatics_FullMethodName                 = "/api.dwdata.v3.DwdataService/GetJudicialStatics"
	DwdataService_GetEnterpriseCredential_FullMethodName            = "/api.dwdata.v3.DwdataService/GetEnterpriseCredential"
	DwdataService_GetEnterpriseRankingList_FullMethodName           = "/api.dwdata.v3.DwdataService/GetEnterpriseRankingList"
	DwdataService_GetEnterpriseIndustry_FullMethodName              = "/api.dwdata.v3.DwdataService/GetEnterpriseIndustry"
	DwdataService_GetEnterpriseProduct_FullMethodName               = "/api.dwdata.v3.DwdataService/GetEnterpriseProduct"
	DwdataService_GetMacroEconomyData_FullMethodName                = "/api.dwdata.v3.DwdataService/GetMacroEconomyData"
)

// DwdataServiceClient is the client API for DwdataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DwdataServiceClient interface {
	GetUscIdByEnterpriseName(ctx context.Context, in *GetUscIdByEnterpriseNameReq, opts ...grpc.CallOption) (*GetUscIdByEnterpriseNameResp, error)
	GetEnterpriseInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataDictResp, error)
	GetEntEquityTransparency(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEntEquityTransparencyConclusion(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataDictResp, error)
	GetEntShareholders(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEntInvestment(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEntFinancing(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEntBranches(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetCaseRegistrationInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetForeclosureDisposition(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetExecutive(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetHistoricalExecutive(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEquityFrozen(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetHighConsumptionRestriction(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetCourtAnnouncement(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEnterpriseManagerInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetDiscreditedDebtor(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetJudicialStatics(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEnterpriseCredential(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEnterpriseRankingList(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetEntRankingListResp, error)
	GetEnterpriseIndustry(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEnterpriseProduct(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetMacroEconomyData(ctx context.Context, in *GetMacroEconomyDataReq, opts ...grpc.CallOption) (*GetDataListResp, error)
}

type dwdataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDwdataServiceClient(cc grpc.ClientConnInterface) DwdataServiceClient {
	return &dwdataServiceClient{cc}
}

func (c *dwdataServiceClient) GetUscIdByEnterpriseName(ctx context.Context, in *GetUscIdByEnterpriseNameReq, opts ...grpc.CallOption) (*GetUscIdByEnterpriseNameResp, error) {
	out := new(GetUscIdByEnterpriseNameResp)
	err := c.cc.Invoke(ctx, DwdataService_GetUscIdByEnterpriseName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataDictResp, error) {
	out := new(GetDataDictResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEntEquityTransparency(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEntEquityTransparency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEntEquityTransparencyConclusion(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataDictResp, error) {
	out := new(GetDataDictResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEntEquityTransparencyConclusion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEntShareholders(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEntShareholders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEntInvestment(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEntInvestment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEntFinancing(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEntFinancing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEntBranches(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEntBranches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetCaseRegistrationInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetCaseRegistrationInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetForeclosureDisposition(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetForeclosureDisposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetExecutive(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetExecutive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetHistoricalExecutive(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetHistoricalExecutive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEquityFrozen(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEquityFrozen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetHighConsumptionRestriction(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetHighConsumptionRestriction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetCourtAnnouncement(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetCourtAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseManagerInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseManagerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetDiscreditedDebtor(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetDiscreditedDebtor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetJudicialStatics(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetJudicialStatics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseCredential(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseRankingList(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetEntRankingListResp, error) {
	out := new(GetEntRankingListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseRankingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseIndustry(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseIndustry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseProduct(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetMacroEconomyData(ctx context.Context, in *GetMacroEconomyDataReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetMacroEconomyData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DwdataServiceServer is the server API for DwdataService service.
// All implementations must embed UnimplementedDwdataServiceServer
// for forward compatibility
type DwdataServiceServer interface {
	GetUscIdByEnterpriseName(context.Context, *GetUscIdByEnterpriseNameReq) (*GetUscIdByEnterpriseNameResp, error)
	GetEnterpriseInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataDictResp, error)
	GetEntEquityTransparency(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntEquityTransparencyConclusion(context.Context, *GetDataBeforeTimePointReq) (*GetDataDictResp, error)
	GetEntShareholders(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntInvestment(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntFinancing(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntBranches(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetCaseRegistrationInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetForeclosureDisposition(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetExecutive(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetHistoricalExecutive(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEquityFrozen(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetHighConsumptionRestriction(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetCourtAnnouncement(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEnterpriseManagerInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetDiscreditedDebtor(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetJudicialStatics(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEnterpriseCredential(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEnterpriseRankingList(context.Context, *GetDataBeforeTimePointReq) (*GetEntRankingListResp, error)
	GetEnterpriseIndustry(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEnterpriseProduct(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetMacroEconomyData(context.Context, *GetMacroEconomyDataReq) (*GetDataListResp, error)
	mustEmbedUnimplementedDwdataServiceServer()
}

// UnimplementedDwdataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDwdataServiceServer struct {
}

func (UnimplementedDwdataServiceServer) GetUscIdByEnterpriseName(context.Context, *GetUscIdByEnterpriseNameReq) (*GetUscIdByEnterpriseNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUscIdByEnterpriseName not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseInfo not implemented")
}
func (UnimplementedDwdataServiceServer) GetEntEquityTransparency(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntEquityTransparency not implemented")
}
func (UnimplementedDwdataServiceServer) GetEntEquityTransparencyConclusion(context.Context, *GetDataBeforeTimePointReq) (*GetDataDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntEquityTransparencyConclusion not implemented")
}
func (UnimplementedDwdataServiceServer) GetEntShareholders(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntShareholders not implemented")
}
func (UnimplementedDwdataServiceServer) GetEntInvestment(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntInvestment not implemented")
}
func (UnimplementedDwdataServiceServer) GetEntFinancing(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntFinancing not implemented")
}
func (UnimplementedDwdataServiceServer) GetEntBranches(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntBranches not implemented")
}
func (UnimplementedDwdataServiceServer) GetCaseRegistrationInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaseRegistrationInfo not implemented")
}
func (UnimplementedDwdataServiceServer) GetForeclosureDisposition(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForeclosureDisposition not implemented")
}
func (UnimplementedDwdataServiceServer) GetExecutive(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutive not implemented")
}
func (UnimplementedDwdataServiceServer) GetHistoricalExecutive(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalExecutive not implemented")
}
func (UnimplementedDwdataServiceServer) GetEquityFrozen(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquityFrozen not implemented")
}
func (UnimplementedDwdataServiceServer) GetHighConsumptionRestriction(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHighConsumptionRestriction not implemented")
}
func (UnimplementedDwdataServiceServer) GetCourtAnnouncement(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourtAnnouncement not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseManagerInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseManagerInfo not implemented")
}
func (UnimplementedDwdataServiceServer) GetDiscreditedDebtor(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscreditedDebtor not implemented")
}
func (UnimplementedDwdataServiceServer) GetJudicialStatics(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJudicialStatics not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseCredential(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseCredential not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseRankingList(context.Context, *GetDataBeforeTimePointReq) (*GetEntRankingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseRankingList not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseIndustry(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseIndustry not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseProduct(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseProduct not implemented")
}
func (UnimplementedDwdataServiceServer) GetMacroEconomyData(context.Context, *GetMacroEconomyDataReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacroEconomyData not implemented")
}
func (UnimplementedDwdataServiceServer) mustEmbedUnimplementedDwdataServiceServer() {}

// UnsafeDwdataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DwdataServiceServer will
// result in compilation errors.
type UnsafeDwdataServiceServer interface {
	mustEmbedUnimplementedDwdataServiceServer()
}

func RegisterDwdataServiceServer(s grpc.ServiceRegistrar, srv DwdataServiceServer) {
	s.RegisterService(&DwdataService_ServiceDesc, srv)
}

func _DwdataService_GetUscIdByEnterpriseName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUscIdByEnterpriseNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetUscIdByEnterpriseName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetUscIdByEnterpriseName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetUscIdByEnterpriseName(ctx, req.(*GetUscIdByEnterpriseNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseInfo(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEntEquityTransparency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEntEquityTransparency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEntEquityTransparency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEntEquityTransparency(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEntEquityTransparencyConclusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEntEquityTransparencyConclusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEntEquityTransparencyConclusion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEntEquityTransparencyConclusion(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEntShareholders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEntShareholders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEntShareholders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEntShareholders(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEntInvestment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEntInvestment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEntInvestment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEntInvestment(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEntFinancing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEntFinancing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEntFinancing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEntFinancing(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEntBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEntBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEntBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEntBranches(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetCaseRegistrationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetCaseRegistrationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetCaseRegistrationInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetCaseRegistrationInfo(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetForeclosureDisposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetForeclosureDisposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetForeclosureDisposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetForeclosureDisposition(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetExecutive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetExecutive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetExecutive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetExecutive(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetHistoricalExecutive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetHistoricalExecutive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetHistoricalExecutive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetHistoricalExecutive(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEquityFrozen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEquityFrozen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEquityFrozen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEquityFrozen(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetHighConsumptionRestriction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetHighConsumptionRestriction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetHighConsumptionRestriction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetHighConsumptionRestriction(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetCourtAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetCourtAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetCourtAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetCourtAnnouncement(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseManagerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseManagerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseManagerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseManagerInfo(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetDiscreditedDebtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetDiscreditedDebtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetDiscreditedDebtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetDiscreditedDebtor(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetJudicialStatics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetJudicialStatics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetJudicialStatics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetJudicialStatics(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseCredential(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseRankingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseRankingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseRankingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseRankingList(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseIndustry(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseProduct(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetMacroEconomyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacroEconomyDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetMacroEconomyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetMacroEconomyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetMacroEconomyData(ctx, req.(*GetMacroEconomyDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DwdataService_ServiceDesc is the grpc.ServiceDesc for DwdataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DwdataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dwdata.v3.DwdataService",
	HandlerType: (*DwdataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUscIdByEnterpriseName",
			Handler:    _DwdataService_GetUscIdByEnterpriseName_Handler,
		},
		{
			MethodName: "GetEnterpriseInfo",
			Handler:    _DwdataService_GetEnterpriseInfo_Handler,
		},
		{
			MethodName: "GetEntEquityTransparency",
			Handler:    _DwdataService_GetEntEquityTransparency_Handler,
		},
		{
			MethodName: "GetEntEquityTransparencyConclusion",
			Handler:    _DwdataService_GetEntEquityTransparencyConclusion_Handler,
		},
		{
			MethodName: "GetEntShareholders",
			Handler:    _DwdataService_GetEntShareholders_Handler,
		},
		{
			MethodName: "GetEntInvestment",
			Handler:    _DwdataService_GetEntInvestment_Handler,
		},
		{
			MethodName: "GetEntFinancing",
			Handler:    _DwdataService_GetEntFinancing_Handler,
		},
		{
			MethodName: "GetEntBranches",
			Handler:    _DwdataService_GetEntBranches_Handler,
		},
		{
			MethodName: "GetCaseRegistrationInfo",
			Handler:    _DwdataService_GetCaseRegistrationInfo_Handler,
		},
		{
			MethodName: "GetForeclosureDisposition",
			Handler:    _DwdataService_GetForeclosureDisposition_Handler,
		},
		{
			MethodName: "GetExecutive",
			Handler:    _DwdataService_GetExecutive_Handler,
		},
		{
			MethodName: "GetHistoricalExecutive",
			Handler:    _DwdataService_GetHistoricalExecutive_Handler,
		},
		{
			MethodName: "GetEquityFrozen",
			Handler:    _DwdataService_GetEquityFrozen_Handler,
		},
		{
			MethodName: "GetHighConsumptionRestriction",
			Handler:    _DwdataService_GetHighConsumptionRestriction_Handler,
		},
		{
			MethodName: "GetCourtAnnouncement",
			Handler:    _DwdataService_GetCourtAnnouncement_Handler,
		},
		{
			MethodName: "GetEnterpriseManagerInfo",
			Handler:    _DwdataService_GetEnterpriseManagerInfo_Handler,
		},
		{
			MethodName: "GetDiscreditedDebtor",
			Handler:    _DwdataService_GetDiscreditedDebtor_Handler,
		},
		{
			MethodName: "GetJudicialStatics",
			Handler:    _DwdataService_GetJudicialStatics_Handler,
		},
		{
			MethodName: "GetEnterpriseCredential",
			Handler:    _DwdataService_GetEnterpriseCredential_Handler,
		},
		{
			MethodName: "GetEnterpriseRankingList",
			Handler:    _DwdataService_GetEnterpriseRankingList_Handler,
		},
		{
			MethodName: "GetEnterpriseIndustry",
			Handler:    _DwdataService_GetEnterpriseIndustry_Handler,
		},
		{
			MethodName: "GetEnterpriseProduct",
			Handler:    _DwdataService_GetEnterpriseProduct_Handler,
		},
		{
			MethodName: "GetMacroEconomyData",
			Handler:    _DwdataService_GetMacroEconomyData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dwdata/v3/dw_data.proto",
}
