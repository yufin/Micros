// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.20.3
// source: api/dwdata/v3/dw_data.proto

package dwdataV3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetMacroEconomyDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int64  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNum  int64  `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	Item     string `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
	SortBy   string `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *GetMacroEconomyDataReq) Reset() {
	*x = GetMacroEconomyDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacroEconomyDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacroEconomyDataReq) ProtoMessage() {}

func (x *GetMacroEconomyDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacroEconomyDataReq.ProtoReflect.Descriptor instead.
func (*GetMacroEconomyDataReq) Descriptor() ([]byte, []int) {
	return file_api_dwdata_v3_dw_data_proto_rawDescGZIP(), []int{0}
}

func (x *GetMacroEconomyDataReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMacroEconomyDataReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetMacroEconomyDataReq) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *GetMacroEconomyDataReq) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

type GetDataDictResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32            `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string           `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data    *structpb.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDataDictResp) Reset() {
	*x = GetDataDictResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataDictResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataDictResp) ProtoMessage() {}

func (x *GetDataDictResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataDictResp.ProtoReflect.Descriptor instead.
func (*GetDataDictResp) Descriptor() ([]byte, []int) {
	return file_api_dwdata_v3_dw_data_proto_rawDescGZIP(), []int{1}
}

func (x *GetDataDictResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetDataDictResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDataDictResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetDataDictResp) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDataListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data    []*structpb.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Total   int64              `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetDataListResp) Reset() {
	*x = GetDataListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataListResp) ProtoMessage() {}

func (x *GetDataListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataListResp.ProtoReflect.Descriptor instead.
func (*GetDataListResp) Descriptor() ([]byte, []int) {
	return file_api_dwdata_v3_dw_data_proto_rawDescGZIP(), []int{2}
}

func (x *GetDataListResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetDataListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDataListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetDataListResp) GetData() []*structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetDataListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetDataWithDurationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UscId              string                 `protobuf:"bytes,1,opt,name=usc_id,json=uscId,proto3" json:"usc_id,omitempty"`
	TimePoint          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_point,json=timePoint,proto3" json:"time_point,omitempty"`
	ValidateExtendDate int32                  `protobuf:"varint,3,opt,name=validate_extend_date,json=validateExtendDate,proto3" json:"validate_extend_date,omitempty"`
}

func (x *GetDataWithDurationReq) Reset() {
	*x = GetDataWithDurationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataWithDurationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataWithDurationReq) ProtoMessage() {}

func (x *GetDataWithDurationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataWithDurationReq.ProtoReflect.Descriptor instead.
func (*GetDataWithDurationReq) Descriptor() ([]byte, []int) {
	return file_api_dwdata_v3_dw_data_proto_rawDescGZIP(), []int{3}
}

func (x *GetDataWithDurationReq) GetUscId() string {
	if x != nil {
		return x.UscId
	}
	return ""
}

func (x *GetDataWithDurationReq) GetTimePoint() *timestamppb.Timestamp {
	if x != nil {
		return x.TimePoint
	}
	return nil
}

func (x *GetDataWithDurationReq) GetValidateExtendDate() int32 {
	if x != nil {
		return x.ValidateExtendDate
	}
	return 0
}

type GetDataBeforeTimePointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UscId     string                 `protobuf:"bytes,1,opt,name=usc_id,json=uscId,proto3" json:"usc_id,omitempty"`
	TimePoint *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_point,json=timePoint,proto3" json:"time_point,omitempty"`
	PageSize  int64                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNum   int64                  `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
}

func (x *GetDataBeforeTimePointReq) Reset() {
	*x = GetDataBeforeTimePointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataBeforeTimePointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataBeforeTimePointReq) ProtoMessage() {}

func (x *GetDataBeforeTimePointReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataBeforeTimePointReq.ProtoReflect.Descriptor instead.
func (*GetDataBeforeTimePointReq) Descriptor() ([]byte, []int) {
	return file_api_dwdata_v3_dw_data_proto_rawDescGZIP(), []int{4}
}

func (x *GetDataBeforeTimePointReq) GetUscId() string {
	if x != nil {
		return x.UscId
	}
	return ""
}

func (x *GetDataBeforeTimePointReq) GetTimePoint() *timestamppb.Timestamp {
	if x != nil {
		return x.TimePoint
	}
	return nil
}

func (x *GetDataBeforeTimePointReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetDataBeforeTimePointReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type GetUscIdByEnterpriseNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseName string `protobuf:"bytes,1,opt,name=enterprise_name,json=enterpriseName,proto3" json:"enterprise_name,omitempty"`
}

func (x *GetUscIdByEnterpriseNameReq) Reset() {
	*x = GetUscIdByEnterpriseNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUscIdByEnterpriseNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUscIdByEnterpriseNameReq) ProtoMessage() {}

func (x *GetUscIdByEnterpriseNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUscIdByEnterpriseNameReq.ProtoReflect.Descriptor instead.
func (*GetUscIdByEnterpriseNameReq) Descriptor() ([]byte, []int) {
	return file_api_dwdata_v3_dw_data_proto_rawDescGZIP(), []int{5}
}

func (x *GetUscIdByEnterpriseNameReq) GetEnterpriseName() string {
	if x != nil {
		return x.EnterpriseName
	}
	return ""
}

type GetUscIdByEnterpriseNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32                                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string                                 `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data    *GetUscIdByEnterpriseNameResp_EntIdent `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUscIdByEnterpriseNameResp) Reset() {
	*x = GetUscIdByEnterpriseNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUscIdByEnterpriseNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUscIdByEnterpriseNameResp) ProtoMessage() {}

func (x *GetUscIdByEnterpriseNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUscIdByEnterpriseNameResp.ProtoReflect.Descriptor instead.
func (*GetUscIdByEnterpriseNameResp) Descriptor() ([]byte, []int) {
	return file_api_dwdata_v3_dw_data_proto_rawDescGZIP(), []int{6}
}

func (x *GetUscIdByEnterpriseNameResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetUscIdByEnterpriseNameResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUscIdByEnterpriseNameResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUscIdByEnterpriseNameResp) GetData() *GetUscIdByEnterpriseNameResp_EntIdent {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetEntRankingListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32                                          `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string                                         `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data    []*GetEntRankingListResp_EnterpriseRankingList `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Total   int64                                          `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetEntRankingListResp) Reset() {
	*x = GetEntRankingListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntRankingListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntRankingListResp) ProtoMessage() {}

func (x *GetEntRankingListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntRankingListResp.ProtoReflect.Descriptor instead.
func (*GetEntRankingListResp) Descriptor() ([]byte, []int) {
	return file_api_dwdata_v3_dw_data_proto_rawDescGZIP(), []int{7}
}

func (x *GetEntRankingListResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetEntRankingListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetEntRankingListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetEntRankingListResp) GetData() []*GetEntRankingListResp_EnterpriseRankingList {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetEntRankingListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetUscIdByEnterpriseNameResp_EntIdent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists  bool   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	IsLegal bool   `protobuf:"varint,2,opt,name=isLegal,proto3" json:"isLegal,omitempty"`
	UscId   string `protobuf:"bytes,3,opt,name=usc_id,json=uscId,proto3" json:"usc_id,omitempty"`
}

func (x *GetUscIdByEnterpriseNameResp_EntIdent) Reset() {
	*x = GetUscIdByEnterpriseNameResp_EntIdent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUscIdByEnterpriseNameResp_EntIdent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUscIdByEnterpriseNameResp_EntIdent) ProtoMessage() {}

func (x *GetUscIdByEnterpriseNameResp_EntIdent) ProtoReflect() protoreflect.Message {
	mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUscIdByEnterpriseNameResp_EntIdent.ProtoReflect.Descriptor instead.
func (*GetUscIdByEnterpriseNameResp_EntIdent) Descriptor() ([]byte, []int) {
	return file_api_dwdata_v3_dw_data_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetUscIdByEnterpriseNameResp_EntIdent) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *GetUscIdByEnterpriseNameResp_EntIdent) GetIsLegal() bool {
	if x != nil {
		return x.IsLegal
	}
	return false
}

func (x *GetUscIdByEnterpriseNameResp_EntIdent) GetUscId() string {
	if x != nil {
		return x.UscId
	}
	return ""
}

type GetEntRankingListResp_EnterpriseRankingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UscId                 string `protobuf:"bytes,1,opt,name=usc_id,json=uscId,proto3" json:"usc_id,omitempty"`
	RankingPosition       int32  `protobuf:"varint,2,opt,name=ranking_position,json=rankingPosition,proto3" json:"ranking_position,omitempty"`
	ListTitle             string `protobuf:"bytes,3,opt,name=list_title,json=listTitle,proto3" json:"list_title,omitempty"`
	ListType              string `protobuf:"bytes,4,opt,name=list_type,json=listType,proto3" json:"list_type,omitempty"`
	ListSource            string `protobuf:"bytes,5,opt,name=list_source,json=listSource,proto3" json:"list_source,omitempty"`
	ListParticipantsTotal int32  `protobuf:"varint,6,opt,name=list_participants_total,json=listParticipantsTotal,proto3" json:"list_participants_total,omitempty"`
	ListPublishedDate     string `protobuf:"bytes,7,opt,name=list_published_date,json=listPublishedDate,proto3" json:"list_published_date,omitempty"`
	ListUrlQcc            string `protobuf:"bytes,8,opt,name=list_url_qcc,json=listUrlQcc,proto3" json:"list_url_qcc,omitempty"`
	ListUrlOrigin         string `protobuf:"bytes,9,opt,name=list_url_origin,json=listUrlOrigin,proto3" json:"list_url_origin,omitempty"`
}

func (x *GetEntRankingListResp_EnterpriseRankingList) Reset() {
	*x = GetEntRankingListResp_EnterpriseRankingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntRankingListResp_EnterpriseRankingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntRankingListResp_EnterpriseRankingList) ProtoMessage() {}

func (x *GetEntRankingListResp_EnterpriseRankingList) ProtoReflect() protoreflect.Message {
	mi := &file_api_dwdata_v3_dw_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntRankingListResp_EnterpriseRankingList.ProtoReflect.Descriptor instead.
func (*GetEntRankingListResp_EnterpriseRankingList) Descriptor() ([]byte, []int) {
	return file_api_dwdata_v3_dw_data_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetEntRankingListResp_EnterpriseRankingList) GetUscId() string {
	if x != nil {
		return x.UscId
	}
	return ""
}

func (x *GetEntRankingListResp_EnterpriseRankingList) GetRankingPosition() int32 {
	if x != nil {
		return x.RankingPosition
	}
	return 0
}

func (x *GetEntRankingListResp_EnterpriseRankingList) GetListTitle() string {
	if x != nil {
		return x.ListTitle
	}
	return ""
}

func (x *GetEntRankingListResp_EnterpriseRankingList) GetListType() string {
	if x != nil {
		return x.ListType
	}
	return ""
}

func (x *GetEntRankingListResp_EnterpriseRankingList) GetListSource() string {
	if x != nil {
		return x.ListSource
	}
	return ""
}

func (x *GetEntRankingListResp_EnterpriseRankingList) GetListParticipantsTotal() int32 {
	if x != nil {
		return x.ListParticipantsTotal
	}
	return 0
}

func (x *GetEntRankingListResp_EnterpriseRankingList) GetListPublishedDate() string {
	if x != nil {
		return x.ListPublishedDate
	}
	return ""
}

func (x *GetEntRankingListResp_EnterpriseRankingList) GetListUrlQcc() string {
	if x != nil {
		return x.ListUrlQcc
	}
	return ""
}

func (x *GetEntRankingListResp_EnterpriseRankingList) GetListUrlOrigin() string {
	if x != nil {
		return x.ListUrlOrigin
	}
	return ""
}

var File_api_dwdata_v3_dw_data_proto protoreflect.FileDescriptor

var file_api_dwdata_v3_dw_data_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x33, 0x2f,
	0x64, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x7e, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06,
	0x75, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73,
	0x63, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xa5, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15,
	0x0a, 0x06, 0x75, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x75, 0x73, 0x63, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x46, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x63, 0x49, 0x64, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xfd, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x63, 0x49, 0x64, 0x42, 0x79, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x63, 0x49, 0x64, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x45, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x53, 0x0a, 0x08, 0x45,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x73, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x63, 0x49, 0x64,
	0x22, 0xa8, 0x04, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x1a, 0xe8, 0x02, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x73,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x63, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x71, 0x63,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x72, 0x6c,
	0x51, 0x63, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69,
	0x73, 0x74, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x32, 0xae, 0x12, 0x0a, 0x0d,
	0x44, 0x77, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x63, 0x49, 0x64, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x63,
	0x49, 0x64, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x63, 0x49, 0x64, 0x42, 0x79,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x6b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x48, 0x69, 0x67, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x3e, 0x0a, 0x0d,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x42, 0x08, 0x44,
	0x77, 0x64, 0x61, 0x74, 0x61, 0x56, 0x33, 0x50, 0x01, 0x5a, 0x21, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x76, 0x33, 0x3b, 0x64, 0x77, 0x64, 0x61, 0x74, 0x61, 0x56, 0x33, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_dwdata_v3_dw_data_proto_rawDescOnce sync.Once
	file_api_dwdata_v3_dw_data_proto_rawDescData = file_api_dwdata_v3_dw_data_proto_rawDesc
)

func file_api_dwdata_v3_dw_data_proto_rawDescGZIP() []byte {
	file_api_dwdata_v3_dw_data_proto_rawDescOnce.Do(func() {
		file_api_dwdata_v3_dw_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_dwdata_v3_dw_data_proto_rawDescData)
	})
	return file_api_dwdata_v3_dw_data_proto_rawDescData
}

var file_api_dwdata_v3_dw_data_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_dwdata_v3_dw_data_proto_goTypes = []interface{}{
	(*GetMacroEconomyDataReq)(nil),                      // 0: api.dwdata.v3.GetMacroEconomyDataReq
	(*GetDataDictResp)(nil),                             // 1: api.dwdata.v3.GetDataDictResp
	(*GetDataListResp)(nil),                             // 2: api.dwdata.v3.GetDataListResp
	(*GetDataWithDurationReq)(nil),                      // 3: api.dwdata.v3.GetDataWithDurationReq
	(*GetDataBeforeTimePointReq)(nil),                   // 4: api.dwdata.v3.GetDataBeforeTimePointReq
	(*GetUscIdByEnterpriseNameReq)(nil),                 // 5: api.dwdata.v3.GetUscIdByEnterpriseNameReq
	(*GetUscIdByEnterpriseNameResp)(nil),                // 6: api.dwdata.v3.GetUscIdByEnterpriseNameResp
	(*GetEntRankingListResp)(nil),                       // 7: api.dwdata.v3.GetEntRankingListResp
	(*GetUscIdByEnterpriseNameResp_EntIdent)(nil),       // 8: api.dwdata.v3.GetUscIdByEnterpriseNameResp.EntIdent
	(*GetEntRankingListResp_EnterpriseRankingList)(nil), // 9: api.dwdata.v3.GetEntRankingListResp.EnterpriseRankingList
	(*structpb.Struct)(nil),                             // 10: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                       // 11: google.protobuf.Timestamp
}
var file_api_dwdata_v3_dw_data_proto_depIdxs = []int32{
	10, // 0: api.dwdata.v3.GetDataDictResp.data:type_name -> google.protobuf.Struct
	10, // 1: api.dwdata.v3.GetDataListResp.data:type_name -> google.protobuf.Struct
	11, // 2: api.dwdata.v3.GetDataWithDurationReq.time_point:type_name -> google.protobuf.Timestamp
	11, // 3: api.dwdata.v3.GetDataBeforeTimePointReq.time_point:type_name -> google.protobuf.Timestamp
	8,  // 4: api.dwdata.v3.GetUscIdByEnterpriseNameResp.data:type_name -> api.dwdata.v3.GetUscIdByEnterpriseNameResp.EntIdent
	9,  // 5: api.dwdata.v3.GetEntRankingListResp.data:type_name -> api.dwdata.v3.GetEntRankingListResp.EnterpriseRankingList
	5,  // 6: api.dwdata.v3.DwdataService.GetUscIdByEnterpriseName:input_type -> api.dwdata.v3.GetUscIdByEnterpriseNameReq
	4,  // 7: api.dwdata.v3.DwdataService.GetEnterpriseInfo:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 8: api.dwdata.v3.DwdataService.GetEntEquityTransparency:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 9: api.dwdata.v3.DwdataService.GetEntEquityTransparencyConclusion:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 10: api.dwdata.v3.DwdataService.GetEntShareholders:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 11: api.dwdata.v3.DwdataService.GetEntInvestment:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 12: api.dwdata.v3.DwdataService.GetEntFinancing:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 13: api.dwdata.v3.DwdataService.GetEntBranches:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 14: api.dwdata.v3.DwdataService.GetCaseRegistrationInfo:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 15: api.dwdata.v3.DwdataService.GetForeclosureDisposition:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 16: api.dwdata.v3.DwdataService.GetExecutive:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 17: api.dwdata.v3.DwdataService.GetHistoricalExecutive:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 18: api.dwdata.v3.DwdataService.GetEquityFrozen:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 19: api.dwdata.v3.DwdataService.GetHighConsumptionRestriction:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 20: api.dwdata.v3.DwdataService.GetCourtAnnouncement:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 21: api.dwdata.v3.DwdataService.GetEnterpriseManagerInfo:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 22: api.dwdata.v3.DwdataService.GetDiscreditedDebtor:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 23: api.dwdata.v3.DwdataService.GetJudicialStatics:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 24: api.dwdata.v3.DwdataService.GetEnterpriseCredential:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 25: api.dwdata.v3.DwdataService.GetEnterpriseRankingList:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 26: api.dwdata.v3.DwdataService.GetEnterpriseIndustry:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	4,  // 27: api.dwdata.v3.DwdataService.GetEnterpriseProduct:input_type -> api.dwdata.v3.GetDataBeforeTimePointReq
	0,  // 28: api.dwdata.v3.DwdataService.GetMacroEconomyData:input_type -> api.dwdata.v3.GetMacroEconomyDataReq
	6,  // 29: api.dwdata.v3.DwdataService.GetUscIdByEnterpriseName:output_type -> api.dwdata.v3.GetUscIdByEnterpriseNameResp
	1,  // 30: api.dwdata.v3.DwdataService.GetEnterpriseInfo:output_type -> api.dwdata.v3.GetDataDictResp
	2,  // 31: api.dwdata.v3.DwdataService.GetEntEquityTransparency:output_type -> api.dwdata.v3.GetDataListResp
	1,  // 32: api.dwdata.v3.DwdataService.GetEntEquityTransparencyConclusion:output_type -> api.dwdata.v3.GetDataDictResp
	2,  // 33: api.dwdata.v3.DwdataService.GetEntShareholders:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 34: api.dwdata.v3.DwdataService.GetEntInvestment:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 35: api.dwdata.v3.DwdataService.GetEntFinancing:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 36: api.dwdata.v3.DwdataService.GetEntBranches:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 37: api.dwdata.v3.DwdataService.GetCaseRegistrationInfo:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 38: api.dwdata.v3.DwdataService.GetForeclosureDisposition:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 39: api.dwdata.v3.DwdataService.GetExecutive:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 40: api.dwdata.v3.DwdataService.GetHistoricalExecutive:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 41: api.dwdata.v3.DwdataService.GetEquityFrozen:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 42: api.dwdata.v3.DwdataService.GetHighConsumptionRestriction:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 43: api.dwdata.v3.DwdataService.GetCourtAnnouncement:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 44: api.dwdata.v3.DwdataService.GetEnterpriseManagerInfo:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 45: api.dwdata.v3.DwdataService.GetDiscreditedDebtor:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 46: api.dwdata.v3.DwdataService.GetJudicialStatics:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 47: api.dwdata.v3.DwdataService.GetEnterpriseCredential:output_type -> api.dwdata.v3.GetDataListResp
	7,  // 48: api.dwdata.v3.DwdataService.GetEnterpriseRankingList:output_type -> api.dwdata.v3.GetEntRankingListResp
	2,  // 49: api.dwdata.v3.DwdataService.GetEnterpriseIndustry:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 50: api.dwdata.v3.DwdataService.GetEnterpriseProduct:output_type -> api.dwdata.v3.GetDataListResp
	2,  // 51: api.dwdata.v3.DwdataService.GetMacroEconomyData:output_type -> api.dwdata.v3.GetDataListResp
	29, // [29:52] is the sub-list for method output_type
	6,  // [6:29] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_dwdata_v3_dw_data_proto_init() }
func file_api_dwdata_v3_dw_data_proto_init() {
	if File_api_dwdata_v3_dw_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_dwdata_v3_dw_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacroEconomyDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dwdata_v3_dw_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataDictResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dwdata_v3_dw_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dwdata_v3_dw_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataWithDurationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dwdata_v3_dw_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataBeforeTimePointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dwdata_v3_dw_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUscIdByEnterpriseNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dwdata_v3_dw_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUscIdByEnterpriseNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dwdata_v3_dw_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntRankingListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dwdata_v3_dw_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUscIdByEnterpriseNameResp_EntIdent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dwdata_v3_dw_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntRankingListResp_EnterpriseRankingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_dwdata_v3_dw_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_dwdata_v3_dw_data_proto_goTypes,
		DependencyIndexes: file_api_dwdata_v3_dw_data_proto_depIdxs,
		MessageInfos:      file_api_dwdata_v3_dw_data_proto_msgTypes,
	}.Build()
	File_api_dwdata_v3_dw_data_proto = out.File
	file_api_dwdata_v3_dw_data_proto_rawDesc = nil
	file_api_dwdata_v3_dw_data_proto_goTypes = nil
	file_api_dwdata_v3_dw_data_proto_depIdxs = nil
}
