// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/dwdata/v2/dw_data.proto

package dwdataV2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DwdataService_GetEnterpriseIdent_FullMethodName       = "/api.dwdata.v2.DwdataService/GetEnterpriseIdent"
	DwdataService_GetEnterpriseInfo_FullMethodName        = "/api.dwdata.v2.DwdataService/GetEnterpriseInfo"
	DwdataService_GetEnterpriseCredential_FullMethodName  = "/api.dwdata.v2.DwdataService/GetEnterpriseCredential"
	DwdataService_GetEnterpriseRankingList_FullMethodName = "/api.dwdata.v2.DwdataService/GetEnterpriseRankingList"
	DwdataService_GetEnterpriseIndustry_FullMethodName    = "/api.dwdata.v2.DwdataService/GetEnterpriseIndustry"
	DwdataService_GetEnterpriseProduct_FullMethodName     = "/api.dwdata.v2.DwdataService/GetEnterpriseProduct"
	DwdataService_GetEntEquityTransparency_FullMethodName = "/api.dwdata.v2.DwdataService/GetEntEquityTransparency"
)

// DwdataServiceClient is the client API for DwdataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DwdataServiceClient interface {
	GetEnterpriseIdent(ctx context.Context, in *GetEntIdentReq, opts ...grpc.CallOption) (*EntIdentResp, error)
	GetEnterpriseInfo(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntInfoResp, error)
	GetEnterpriseCredential(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntCredentialResp, error)
	GetEnterpriseRankingList(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntRankingListResp, error)
	GetEnterpriseIndustry(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error)
	GetEnterpriseProduct(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error)
	GetEntEquityTransparency(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EquityTransparencyResp, error)
}

type dwdataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDwdataServiceClient(cc grpc.ClientConnInterface) DwdataServiceClient {
	return &dwdataServiceClient{cc}
}

func (c *dwdataServiceClient) GetEnterpriseIdent(ctx context.Context, in *GetEntIdentReq, opts ...grpc.CallOption) (*EntIdentResp, error) {
	out := new(EntIdentResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseIdent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseInfo(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntInfoResp, error) {
	out := new(EntInfoResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseCredential(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntCredentialResp, error) {
	out := new(EntCredentialResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseRankingList(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntRankingListResp, error) {
	out := new(EntRankingListResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseRankingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseIndustry(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error) {
	out := new(EntStrArrayResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseIndustry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEnterpriseProduct(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error) {
	out := new(EntStrArrayResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEnterpriseProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwdataServiceClient) GetEntEquityTransparency(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EquityTransparencyResp, error) {
	out := new(EquityTransparencyResp)
	err := c.cc.Invoke(ctx, DwdataService_GetEntEquityTransparency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DwdataServiceServer is the server API for DwdataService service.
// All implementations must embed UnimplementedDwdataServiceServer
// for forward compatibility
type DwdataServiceServer interface {
	GetEnterpriseIdent(context.Context, *GetEntIdentReq) (*EntIdentResp, error)
	GetEnterpriseInfo(context.Context, *GetEntInfoReq) (*EntInfoResp, error)
	GetEnterpriseCredential(context.Context, *GetEntInfoReq) (*EntCredentialResp, error)
	GetEnterpriseRankingList(context.Context, *GetEntInfoReq) (*EntRankingListResp, error)
	GetEnterpriseIndustry(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error)
	GetEnterpriseProduct(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error)
	GetEntEquityTransparency(context.Context, *GetEntInfoReq) (*EquityTransparencyResp, error)
	mustEmbedUnimplementedDwdataServiceServer()
}

// UnimplementedDwdataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDwdataServiceServer struct {
}

func (UnimplementedDwdataServiceServer) GetEnterpriseIdent(context.Context, *GetEntIdentReq) (*EntIdentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseIdent not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseInfo(context.Context, *GetEntInfoReq) (*EntInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseInfo not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseCredential(context.Context, *GetEntInfoReq) (*EntCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseCredential not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseRankingList(context.Context, *GetEntInfoReq) (*EntRankingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseRankingList not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseIndustry(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseIndustry not implemented")
}
func (UnimplementedDwdataServiceServer) GetEnterpriseProduct(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseProduct not implemented")
}
func (UnimplementedDwdataServiceServer) GetEntEquityTransparency(context.Context, *GetEntInfoReq) (*EquityTransparencyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntEquityTransparency not implemented")
}
func (UnimplementedDwdataServiceServer) mustEmbedUnimplementedDwdataServiceServer() {}

// UnsafeDwdataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DwdataServiceServer will
// result in compilation errors.
type UnsafeDwdataServiceServer interface {
	mustEmbedUnimplementedDwdataServiceServer()
}

func RegisterDwdataServiceServer(s grpc.ServiceRegistrar, srv DwdataServiceServer) {
	s.RegisterService(&DwdataService_ServiceDesc, srv)
}

func _DwdataService_GetEnterpriseIdent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntIdentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseIdent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseIdent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseIdent(ctx, req.(*GetEntIdentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseInfo(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseCredential(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseRankingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseRankingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseRankingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseRankingList(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseIndustry(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEnterpriseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEnterpriseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEnterpriseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEnterpriseProduct(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwdataService_GetEntEquityTransparency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwdataServiceServer).GetEntEquityTransparency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwdataService_GetEntEquityTransparency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwdataServiceServer).GetEntEquityTransparency(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DwdataService_ServiceDesc is the grpc.ServiceDesc for DwdataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DwdataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dwdata.v2.DwdataService",
	HandlerType: (*DwdataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnterpriseIdent",
			Handler:    _DwdataService_GetEnterpriseIdent_Handler,
		},
		{
			MethodName: "GetEnterpriseInfo",
			Handler:    _DwdataService_GetEnterpriseInfo_Handler,
		},
		{
			MethodName: "GetEnterpriseCredential",
			Handler:    _DwdataService_GetEnterpriseCredential_Handler,
		},
		{
			MethodName: "GetEnterpriseRankingList",
			Handler:    _DwdataService_GetEnterpriseRankingList_Handler,
		},
		{
			MethodName: "GetEnterpriseIndustry",
			Handler:    _DwdataService_GetEnterpriseIndustry_Handler,
		},
		{
			MethodName: "GetEnterpriseProduct",
			Handler:    _DwdataService_GetEnterpriseProduct_Handler,
		},
		{
			MethodName: "GetEntEquityTransparency",
			Handler:    _DwdataService_GetEntEquityTransparency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dwdata/v2/dw_data.proto",
}
