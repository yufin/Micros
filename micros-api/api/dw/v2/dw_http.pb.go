// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.4
// source: api/dw/v2/dw.proto

package dwV2

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDwServiceGetEnterpriseCredential = "/api.dw.v2.DwService/GetEnterpriseCredential"
const OperationDwServiceGetEnterpriseEquityTransparency = "/api.dw.v2.DwService/GetEnterpriseEquityTransparency"
const OperationDwServiceGetEnterpriseIdent = "/api.dw.v2.DwService/GetEnterpriseIdent"
const OperationDwServiceGetEnterpriseIndustry = "/api.dw.v2.DwService/GetEnterpriseIndustry"
const OperationDwServiceGetEnterpriseInfo = "/api.dw.v2.DwService/GetEnterpriseInfo"
const OperationDwServiceGetEnterpriseProduct = "/api.dw.v2.DwService/GetEnterpriseProduct"
const OperationDwServiceGetEnterpriseRankingList = "/api.dw.v2.DwService/GetEnterpriseRankingList"

type DwServiceHTTPServer interface {
	GetEnterpriseCredential(context.Context, *GetEntInfoReq) (*EntArrayResp, error)
	GetEnterpriseEquityTransparency(context.Context, *GetEntInfoReq) (*EquityTransparencyResp, error)
	GetEnterpriseIdent(context.Context, *GetEntIdentReq) (*EntIdentResp, error)
	GetEnterpriseIndustry(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error)
	GetEnterpriseInfo(context.Context, *GetEntInfoReq) (*EntStructResp, error)
	GetEnterpriseProduct(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error)
	GetEnterpriseRankingList(context.Context, *GetEntInfoReq) (*EntArrayResp, error)
}

func RegisterDwServiceHTTPServer(s *http.Server, srv DwServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/micros/dw/v2/enterprise/ident", _DwService_GetEnterpriseIdent0_HTTP_Handler(srv))
	r.GET("/micros/dw/v2/enterprise/info", _DwService_GetEnterpriseInfo0_HTTP_Handler(srv))
	r.GET("/micros/dw/v2/enterprise/credential", _DwService_GetEnterpriseCredential0_HTTP_Handler(srv))
	r.GET("/micros/dw/v2/enterprise/ranking-list", _DwService_GetEnterpriseRankingList0_HTTP_Handler(srv))
	r.GET("/micros/dw/v2/enterprise/industry", _DwService_GetEnterpriseIndustry0_HTTP_Handler(srv))
	r.GET("/micros/dw/v2/enterprise/product", _DwService_GetEnterpriseProduct0_HTTP_Handler(srv))
	r.GET("/micros/dw/v2/enterprise/equity-transparency", _DwService_GetEnterpriseEquityTransparency0_HTTP_Handler(srv))
}

func _DwService_GetEnterpriseIdent0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEntIdentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseIdent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseIdent(ctx, req.(*GetEntIdentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EntIdentResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEnterpriseInfo0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEntInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseInfo(ctx, req.(*GetEntInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EntStructResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEnterpriseCredential0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEntInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseCredential)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseCredential(ctx, req.(*GetEntInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EntArrayResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEnterpriseRankingList0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEntInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseRankingList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseRankingList(ctx, req.(*GetEntInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EntArrayResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEnterpriseIndustry0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEntInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseIndustry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseIndustry(ctx, req.(*GetEntInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EntStrArrayResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEnterpriseProduct0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEntInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseProduct(ctx, req.(*GetEntInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EntStrArrayResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEnterpriseEquityTransparency0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEntInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseEquityTransparency)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseEquityTransparency(ctx, req.(*GetEntInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EquityTransparencyResp)
		return ctx.Result(200, reply)
	}
}

type DwServiceHTTPClient interface {
	GetEnterpriseCredential(ctx context.Context, req *GetEntInfoReq, opts ...http.CallOption) (rsp *EntArrayResp, err error)
	GetEnterpriseEquityTransparency(ctx context.Context, req *GetEntInfoReq, opts ...http.CallOption) (rsp *EquityTransparencyResp, err error)
	GetEnterpriseIdent(ctx context.Context, req *GetEntIdentReq, opts ...http.CallOption) (rsp *EntIdentResp, err error)
	GetEnterpriseIndustry(ctx context.Context, req *GetEntInfoReq, opts ...http.CallOption) (rsp *EntStrArrayResp, err error)
	GetEnterpriseInfo(ctx context.Context, req *GetEntInfoReq, opts ...http.CallOption) (rsp *EntStructResp, err error)
	GetEnterpriseProduct(ctx context.Context, req *GetEntInfoReq, opts ...http.CallOption) (rsp *EntStrArrayResp, err error)
	GetEnterpriseRankingList(ctx context.Context, req *GetEntInfoReq, opts ...http.CallOption) (rsp *EntArrayResp, err error)
}

type DwServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDwServiceHTTPClient(client *http.Client) DwServiceHTTPClient {
	return &DwServiceHTTPClientImpl{client}
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseCredential(ctx context.Context, in *GetEntInfoReq, opts ...http.CallOption) (*EntArrayResp, error) {
	var out EntArrayResp
	pattern := "/micros/dw/v2/enterprise/credential"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseCredential))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseEquityTransparency(ctx context.Context, in *GetEntInfoReq, opts ...http.CallOption) (*EquityTransparencyResp, error) {
	var out EquityTransparencyResp
	pattern := "/micros/dw/v2/enterprise/equity-transparency"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseEquityTransparency))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseIdent(ctx context.Context, in *GetEntIdentReq, opts ...http.CallOption) (*EntIdentResp, error) {
	var out EntIdentResp
	pattern := "/micros/dw/v2/enterprise/ident"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseIdent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseIndustry(ctx context.Context, in *GetEntInfoReq, opts ...http.CallOption) (*EntStrArrayResp, error) {
	var out EntStrArrayResp
	pattern := "/micros/dw/v2/enterprise/industry"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseIndustry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseInfo(ctx context.Context, in *GetEntInfoReq, opts ...http.CallOption) (*EntStructResp, error) {
	var out EntStructResp
	pattern := "/micros/dw/v2/enterprise/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseProduct(ctx context.Context, in *GetEntInfoReq, opts ...http.CallOption) (*EntStrArrayResp, error) {
	var out EntStrArrayResp
	pattern := "/micros/dw/v2/enterprise/product"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseRankingList(ctx context.Context, in *GetEntInfoReq, opts ...http.CallOption) (*EntArrayResp, error) {
	var out EntArrayResp
	pattern := "/micros/dw/v2/enterprise/ranking-list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseRankingList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
