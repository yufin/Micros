// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: api/dw/v2/dw.proto

package dwV2

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnterpriseRelations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32                              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string                             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data    *EnterpriseRelations_RelationsData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EnterpriseRelations) Reset() {
	*x = EnterpriseRelations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseRelations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseRelations) ProtoMessage() {}

func (x *EnterpriseRelations) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseRelations.ProtoReflect.Descriptor instead.
func (*EnterpriseRelations) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{0}
}

func (x *EnterpriseRelations) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EnterpriseRelations) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EnterpriseRelations) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EnterpriseRelations) GetData() *EnterpriseRelations_RelationsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type Shareholders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareholderName string `protobuf:"bytes,1,opt,name=shareholder_name,json=shareholderName,proto3" json:"shareholder_name,omitempty"`
	ShareholderType string `protobuf:"bytes,2,opt,name=shareholder_type,json=shareholderType,proto3" json:"shareholder_type,omitempty"`
	CapitalAmount   string `protobuf:"bytes,3,opt,name=capital_amount,json=capitalAmount,proto3" json:"capital_amount,omitempty"`
	RealAmount      string `protobuf:"bytes,4,opt,name=real_amount,json=realAmount,proto3" json:"real_amount,omitempty"`
	CapitalType     string `protobuf:"bytes,5,opt,name=capital_type,json=capitalType,proto3" json:"capital_type,omitempty"`
	Percent         string `protobuf:"bytes,6,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (x *Shareholders) Reset() {
	*x = Shareholders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareholders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareholders) ProtoMessage() {}

func (x *Shareholders) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareholders.ProtoReflect.Descriptor instead.
func (*Shareholders) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{1}
}

func (x *Shareholders) GetShareholderName() string {
	if x != nil {
		return x.ShareholderName
	}
	return ""
}

func (x *Shareholders) GetShareholderType() string {
	if x != nil {
		return x.ShareholderType
	}
	return ""
}

func (x *Shareholders) GetCapitalAmount() string {
	if x != nil {
		return x.CapitalAmount
	}
	return ""
}

func (x *Shareholders) GetRealAmount() string {
	if x != nil {
		return x.RealAmount
	}
	return ""
}

func (x *Shareholders) GetCapitalType() string {
	if x != nil {
		return x.CapitalType
	}
	return ""
}

func (x *Shareholders) GetPercent() string {
	if x != nil {
		return x.Percent
	}
	return ""
}

type ShareholdersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32           `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string          `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Found   bool            `protobuf:"varint,4,opt,name=found,proto3" json:"found,omitempty"`
	Data    []*Shareholders `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ShareholdersResp) Reset() {
	*x = ShareholdersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareholdersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareholdersResp) ProtoMessage() {}

func (x *ShareholdersResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareholdersResp.ProtoReflect.Descriptor instead.
func (*ShareholdersResp) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{2}
}

func (x *ShareholdersResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ShareholdersResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ShareholdersResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ShareholdersResp) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *ShareholdersResp) GetData() []*Shareholders {
	if x != nil {
		return x.Data
	}
	return nil
}

type Investment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseName    string `protobuf:"bytes,1,opt,name=enterprise_name,json=enterpriseName,proto3" json:"enterprise_name,omitempty"`
	Operator          string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	ShareholdingRatio string `protobuf:"bytes,3,opt,name=shareholding_ratio,json=shareholdingRatio,proto3" json:"shareholding_ratio,omitempty"`
	InvestedAmount    string `protobuf:"bytes,4,opt,name=invested_amount,json=investedAmount,proto3" json:"invested_amount,omitempty"`
	StartDate         string `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	Status            string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Investment) Reset() {
	*x = Investment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Investment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Investment) ProtoMessage() {}

func (x *Investment) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Investment.ProtoReflect.Descriptor instead.
func (*Investment) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{3}
}

func (x *Investment) GetEnterpriseName() string {
	if x != nil {
		return x.EnterpriseName
	}
	return ""
}

func (x *Investment) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Investment) GetShareholdingRatio() string {
	if x != nil {
		return x.ShareholdingRatio
	}
	return ""
}

func (x *Investment) GetInvestedAmount() string {
	if x != nil {
		return x.InvestedAmount
	}
	return ""
}

func (x *Investment) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Investment) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type InvestmentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32         `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string        `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Found   bool          `protobuf:"varint,4,opt,name=found,proto3" json:"found,omitempty"`
	Data    []*Investment `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *InvestmentResp) Reset() {
	*x = InvestmentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestmentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestmentResp) ProtoMessage() {}

func (x *InvestmentResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestmentResp.ProtoReflect.Descriptor instead.
func (*InvestmentResp) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{4}
}

func (x *InvestmentResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InvestmentResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InvestmentResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *InvestmentResp) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *InvestmentResp) GetData() []*Investment {
	if x != nil {
		return x.Data
	}
	return nil
}

type Branches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseName string `protobuf:"bytes,1,opt,name=enterprise_name,json=enterpriseName,proto3" json:"enterprise_name,omitempty"`
	Operator       string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Area           string `protobuf:"bytes,3,opt,name=area,proto3" json:"area,omitempty"`
	StartDate      string `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	Status         string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Branches) Reset() {
	*x = Branches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branches) ProtoMessage() {}

func (x *Branches) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branches.ProtoReflect.Descriptor instead.
func (*Branches) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{5}
}

func (x *Branches) GetEnterpriseName() string {
	if x != nil {
		return x.EnterpriseName
	}
	return ""
}

func (x *Branches) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Branches) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *Branches) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Branches) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type BranchesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32       `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string      `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Found   bool        `protobuf:"varint,4,opt,name=found,proto3" json:"found,omitempty"`
	Data    []*Branches `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BranchesResp) Reset() {
	*x = BranchesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchesResp) ProtoMessage() {}

func (x *BranchesResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchesResp.ProtoReflect.Descriptor instead.
func (*BranchesResp) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{6}
}

func (x *BranchesResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BranchesResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BranchesResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BranchesResp) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *BranchesResp) GetData() []*Branches {
	if x != nil {
		return x.Data
	}
	return nil
}

type EquityTransparencyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32               `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string              `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data    *EquityTransparency `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EquityTransparencyResp) Reset() {
	*x = EquityTransparencyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquityTransparencyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquityTransparencyResp) ProtoMessage() {}

func (x *EquityTransparencyResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquityTransparencyResp.ProtoReflect.Descriptor instead.
func (*EquityTransparencyResp) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{7}
}

func (x *EquityTransparencyResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EquityTransparencyResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EquityTransparencyResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EquityTransparencyResp) GetData() *EquityTransparency {
	if x != nil {
		return x.Data
	}
	return nil
}

type EquityTransparency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conclusion  string             `protobuf:"bytes,1,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	Name        string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Shareholder []*structpb.Struct `protobuf:"bytes,3,rep,name=shareholder,proto3" json:"shareholder,omitempty"`
	KeyNo       string             `protobuf:"bytes,4,opt,name=key_no,json=keyNo,proto3" json:"key_no,omitempty"`
}

func (x *EquityTransparency) Reset() {
	*x = EquityTransparency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquityTransparency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquityTransparency) ProtoMessage() {}

func (x *EquityTransparency) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquityTransparency.ProtoReflect.Descriptor instead.
func (*EquityTransparency) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{8}
}

func (x *EquityTransparency) GetConclusion() string {
	if x != nil {
		return x.Conclusion
	}
	return ""
}

func (x *EquityTransparency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EquityTransparency) GetShareholder() []*structpb.Struct {
	if x != nil {
		return x.Shareholder
	}
	return nil
}

func (x *EquityTransparency) GetKeyNo() string {
	if x != nil {
		return x.KeyNo
	}
	return ""
}

type GetEntIdentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseName string `protobuf:"bytes,1,opt,name=enterprise_name,json=enterpriseName,proto3" json:"enterprise_name,omitempty"`
}

func (x *GetEntIdentReq) Reset() {
	*x = GetEntIdentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntIdentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntIdentReq) ProtoMessage() {}

func (x *GetEntIdentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntIdentReq.ProtoReflect.Descriptor instead.
func (*GetEntIdentReq) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{9}
}

func (x *GetEntIdentReq) GetEnterpriseName() string {
	if x != nil {
		return x.EnterpriseName
	}
	return ""
}

type EntIdentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	UscId   string `protobuf:"bytes,4,opt,name=usc_id,json=uscId,proto3" json:"usc_id,omitempty"`
}

func (x *EntIdentResp) Reset() {
	*x = EntIdentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntIdentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntIdentResp) ProtoMessage() {}

func (x *EntIdentResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntIdentResp.ProtoReflect.Descriptor instead.
func (*EntIdentResp) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{10}
}

func (x *EntIdentResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EntIdentResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EntIdentResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EntIdentResp) GetUscId() string {
	if x != nil {
		return x.UscId
	}
	return ""
}

type GetEntInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UscId string `protobuf:"bytes,1,opt,name=usc_id,json=uscId,proto3" json:"usc_id,omitempty"`
}

func (x *GetEntInfoReq) Reset() {
	*x = GetEntInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntInfoReq) ProtoMessage() {}

func (x *GetEntInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntInfoReq.ProtoReflect.Descriptor instead.
func (*GetEntInfoReq) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{11}
}

func (x *GetEntInfoReq) GetUscId() string {
	if x != nil {
		return x.UscId
	}
	return ""
}

type EntStructResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32            `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string           `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data    *structpb.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EntStructResp) Reset() {
	*x = EntStructResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntStructResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntStructResp) ProtoMessage() {}

func (x *EntStructResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntStructResp.ProtoReflect.Descriptor instead.
func (*EntStructResp) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{12}
}

func (x *EntStructResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EntStructResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EntStructResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EntStructResp) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type EntArrayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data    []*structpb.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *EntArrayResp) Reset() {
	*x = EntArrayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntArrayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntArrayResp) ProtoMessage() {}

func (x *EntArrayResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntArrayResp.ProtoReflect.Descriptor instead.
func (*EntArrayResp) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{13}
}

func (x *EntArrayResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EntArrayResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EntArrayResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EntArrayResp) GetData() []*structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type EntStrArrayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data    []string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *EntStrArrayResp) Reset() {
	*x = EntStrArrayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntStrArrayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntStrArrayResp) ProtoMessage() {}

func (x *EntStrArrayResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntStrArrayResp.ProtoReflect.Descriptor instead.
func (*EntStrArrayResp) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{14}
}

func (x *EntStrArrayResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EntStrArrayResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EntStrArrayResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EntStrArrayResp) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type EnterpriseRelations_RelationsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseName string          `protobuf:"bytes,1,opt,name=enterprise_name,json=enterpriseName,proto3" json:"enterprise_name,omitempty"`
	Shareholder    []*Shareholders `protobuf:"bytes,2,rep,name=shareholder,proto3" json:"shareholder,omitempty"`
	Investment     []*Investment   `protobuf:"bytes,3,rep,name=investment,proto3" json:"investment,omitempty"`
	Branch         []*Branches     `protobuf:"bytes,4,rep,name=branch,proto3" json:"branch,omitempty"`
}

func (x *EnterpriseRelations_RelationsData) Reset() {
	*x = EnterpriseRelations_RelationsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_dw_v2_dw_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseRelations_RelationsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseRelations_RelationsData) ProtoMessage() {}

func (x *EnterpriseRelations_RelationsData) ProtoReflect() protoreflect.Message {
	mi := &file_api_dw_v2_dw_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseRelations_RelationsData.ProtoReflect.Descriptor instead.
func (*EnterpriseRelations_RelationsData) Descriptor() ([]byte, []int) {
	return file_api_dw_v2_dw_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EnterpriseRelations_RelationsData) GetEnterpriseName() string {
	if x != nil {
		return x.EnterpriseName
	}
	return ""
}

func (x *EnterpriseRelations_RelationsData) GetShareholder() []*Shareholders {
	if x != nil {
		return x.Shareholder
	}
	return nil
}

func (x *EnterpriseRelations_RelationsData) GetInvestment() []*Investment {
	if x != nil {
		return x.Investment
	}
	return nil
}

func (x *EnterpriseRelations_RelationsData) GetBranch() []*Branches {
	if x != nil {
		return x.Branch
	}
	return nil
}

var File_api_dw_v2_dw_proto protoreflect.FileDescriptor

var file_api_dw_v2_dw_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x77, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x02, 0x0a, 0x13,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xd7, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0xe9, 0x01, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x10,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xe0, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x27,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x45, 0x71, 0x75, 0x69,
	0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x4e, 0x6f, 0x22, 0x39, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a,
	0x0c, 0x45, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x15, 0x0a,
	0x06, 0x75, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75,
	0x73, 0x63, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x63, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x0d,
	0x45, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x0c, 0x45, 0x6e,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xcb,
	0x0a, 0x0a, 0x09, 0x44, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e,
	0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x64, 0x77, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x6e,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12,
	0x1d, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x64, 0x77, 0x2f, 0x76, 0x32, 0x2f, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x79,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x64, 0x77,
	0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x7c, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x12, 0x25, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x64, 0x77, 0x2f, 0x76, 0x32, 0x2f,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x64, 0x77, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x12, 0x76, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x2f, 0x64, 0x77, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x64, 0x77, 0x2f, 0x76,
	0x32, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x65, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x7a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x64,
	0x77, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x75, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x64, 0x77, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x12, 0x21, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x64, 0x77, 0x2f, 0x76, 0x32, 0x2f,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x2f, 0x64, 0x77, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x2e, 0x0a, 0x09,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x77, 0x2e, 0x76, 0x32, 0x42, 0x04, 0x44, 0x77, 0x56, 0x32, 0x50,
	0x01, 0x5a, 0x19, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x77, 0x2f, 0x76, 0x32, 0x3b, 0x64, 0x77, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_dw_v2_dw_proto_rawDescOnce sync.Once
	file_api_dw_v2_dw_proto_rawDescData = file_api_dw_v2_dw_proto_rawDesc
)

func file_api_dw_v2_dw_proto_rawDescGZIP() []byte {
	file_api_dw_v2_dw_proto_rawDescOnce.Do(func() {
		file_api_dw_v2_dw_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_dw_v2_dw_proto_rawDescData)
	})
	return file_api_dw_v2_dw_proto_rawDescData
}

var file_api_dw_v2_dw_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_dw_v2_dw_proto_goTypes = []interface{}{
	(*EnterpriseRelations)(nil),               // 0: api.dw.v2.EnterpriseRelations
	(*Shareholders)(nil),                      // 1: api.dw.v2.Shareholders
	(*ShareholdersResp)(nil),                  // 2: api.dw.v2.ShareholdersResp
	(*Investment)(nil),                        // 3: api.dw.v2.Investment
	(*InvestmentResp)(nil),                    // 4: api.dw.v2.InvestmentResp
	(*Branches)(nil),                          // 5: api.dw.v2.Branches
	(*BranchesResp)(nil),                      // 6: api.dw.v2.BranchesResp
	(*EquityTransparencyResp)(nil),            // 7: api.dw.v2.EquityTransparencyResp
	(*EquityTransparency)(nil),                // 8: api.dw.v2.EquityTransparency
	(*GetEntIdentReq)(nil),                    // 9: api.dw.v2.GetEntIdentReq
	(*EntIdentResp)(nil),                      // 10: api.dw.v2.EntIdentResp
	(*GetEntInfoReq)(nil),                     // 11: api.dw.v2.GetEntInfoReq
	(*EntStructResp)(nil),                     // 12: api.dw.v2.EntStructResp
	(*EntArrayResp)(nil),                      // 13: api.dw.v2.EntArrayResp
	(*EntStrArrayResp)(nil),                   // 14: api.dw.v2.EntStrArrayResp
	(*EnterpriseRelations_RelationsData)(nil), // 15: api.dw.v2.EnterpriseRelations.RelationsData
	(*structpb.Struct)(nil),                   // 16: google.protobuf.Struct
}
var file_api_dw_v2_dw_proto_depIdxs = []int32{
	15, // 0: api.dw.v2.EnterpriseRelations.data:type_name -> api.dw.v2.EnterpriseRelations.RelationsData
	1,  // 1: api.dw.v2.ShareholdersResp.data:type_name -> api.dw.v2.Shareholders
	3,  // 2: api.dw.v2.InvestmentResp.data:type_name -> api.dw.v2.Investment
	5,  // 3: api.dw.v2.BranchesResp.data:type_name -> api.dw.v2.Branches
	8,  // 4: api.dw.v2.EquityTransparencyResp.data:type_name -> api.dw.v2.EquityTransparency
	16, // 5: api.dw.v2.EquityTransparency.shareholder:type_name -> google.protobuf.Struct
	16, // 6: api.dw.v2.EntStructResp.data:type_name -> google.protobuf.Struct
	16, // 7: api.dw.v2.EntArrayResp.data:type_name -> google.protobuf.Struct
	1,  // 8: api.dw.v2.EnterpriseRelations.RelationsData.shareholder:type_name -> api.dw.v2.Shareholders
	3,  // 9: api.dw.v2.EnterpriseRelations.RelationsData.investment:type_name -> api.dw.v2.Investment
	5,  // 10: api.dw.v2.EnterpriseRelations.RelationsData.branch:type_name -> api.dw.v2.Branches
	9,  // 11: api.dw.v2.DwService.GetEnterpriseIdent:input_type -> api.dw.v2.GetEntIdentReq
	11, // 12: api.dw.v2.DwService.GetEnterpriseInfo:input_type -> api.dw.v2.GetEntInfoReq
	11, // 13: api.dw.v2.DwService.GetEnterpriseCredential:input_type -> api.dw.v2.GetEntInfoReq
	11, // 14: api.dw.v2.DwService.GetEnterpriseRankingList:input_type -> api.dw.v2.GetEntInfoReq
	11, // 15: api.dw.v2.DwService.GetEnterpriseIndustry:input_type -> api.dw.v2.GetEntInfoReq
	11, // 16: api.dw.v2.DwService.GetEnterpriseProduct:input_type -> api.dw.v2.GetEntInfoReq
	11, // 17: api.dw.v2.DwService.GetEnterpriseEquityTransparency:input_type -> api.dw.v2.GetEntInfoReq
	11, // 18: api.dw.v2.DwService.GetEntShareholders:input_type -> api.dw.v2.GetEntInfoReq
	11, // 19: api.dw.v2.DwService.GetEntInvestment:input_type -> api.dw.v2.GetEntInfoReq
	11, // 20: api.dw.v2.DwService.GetEntBranches:input_type -> api.dw.v2.GetEntInfoReq
	11, // 21: api.dw.v2.DwService.GetEntRelations:input_type -> api.dw.v2.GetEntInfoReq
	10, // 22: api.dw.v2.DwService.GetEnterpriseIdent:output_type -> api.dw.v2.EntIdentResp
	12, // 23: api.dw.v2.DwService.GetEnterpriseInfo:output_type -> api.dw.v2.EntStructResp
	13, // 24: api.dw.v2.DwService.GetEnterpriseCredential:output_type -> api.dw.v2.EntArrayResp
	13, // 25: api.dw.v2.DwService.GetEnterpriseRankingList:output_type -> api.dw.v2.EntArrayResp
	14, // 26: api.dw.v2.DwService.GetEnterpriseIndustry:output_type -> api.dw.v2.EntStrArrayResp
	14, // 27: api.dw.v2.DwService.GetEnterpriseProduct:output_type -> api.dw.v2.EntStrArrayResp
	7,  // 28: api.dw.v2.DwService.GetEnterpriseEquityTransparency:output_type -> api.dw.v2.EquityTransparencyResp
	2,  // 29: api.dw.v2.DwService.GetEntShareholders:output_type -> api.dw.v2.ShareholdersResp
	4,  // 30: api.dw.v2.DwService.GetEntInvestment:output_type -> api.dw.v2.InvestmentResp
	6,  // 31: api.dw.v2.DwService.GetEntBranches:output_type -> api.dw.v2.BranchesResp
	0,  // 32: api.dw.v2.DwService.GetEntRelations:output_type -> api.dw.v2.EnterpriseRelations
	22, // [22:33] is the sub-list for method output_type
	11, // [11:22] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_dw_v2_dw_proto_init() }
func file_api_dw_v2_dw_proto_init() {
	if File_api_dw_v2_dw_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_dw_v2_dw_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseRelations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareholders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareholdersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Investment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestmentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquityTransparencyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquityTransparency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntIdentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntIdentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntStructResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntArrayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntStrArrayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_dw_v2_dw_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseRelations_RelationsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_dw_v2_dw_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_dw_v2_dw_proto_goTypes,
		DependencyIndexes: file_api_dw_v2_dw_proto_depIdxs,
		MessageInfos:      file_api_dw_v2_dw_proto_msgTypes,
	}.Build()
	File_api_dw_v2_dw_proto = out.File
	file_api_dw_v2_dw_proto_rawDesc = nil
	file_api_dw_v2_dw_proto_goTypes = nil
	file_api_dw_v2_dw_proto_depIdxs = nil
}
