// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: api/dw/v2/dw.proto

package dwV2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DwService_GetEnterpriseIdent_FullMethodName              = "/api.dw.v2.DwService/GetEnterpriseIdent"
	DwService_GetEnterpriseInfo_FullMethodName               = "/api.dw.v2.DwService/GetEnterpriseInfo"
	DwService_GetEnterpriseCredential_FullMethodName         = "/api.dw.v2.DwService/GetEnterpriseCredential"
	DwService_GetEnterpriseRankingList_FullMethodName        = "/api.dw.v2.DwService/GetEnterpriseRankingList"
	DwService_GetEnterpriseIndustry_FullMethodName           = "/api.dw.v2.DwService/GetEnterpriseIndustry"
	DwService_GetEnterpriseProduct_FullMethodName            = "/api.dw.v2.DwService/GetEnterpriseProduct"
	DwService_GetEnterpriseEquityTransparency_FullMethodName = "/api.dw.v2.DwService/GetEnterpriseEquityTransparency"
	DwService_GetEntShareholders_FullMethodName              = "/api.dw.v2.DwService/GetEntShareholders"
	DwService_GetEntInvestment_FullMethodName                = "/api.dw.v2.DwService/GetEntInvestment"
	DwService_GetEntBranches_FullMethodName                  = "/api.dw.v2.DwService/GetEntBranches"
	DwService_GetEntRelations_FullMethodName                 = "/api.dw.v2.DwService/GetEntRelations"
	DwService_GetForeclosureDisposition_FullMethodName       = "/api.dw.v2.DwService/GetForeclosureDisposition"
	DwService_GetExecutive_FullMethodName                    = "/api.dw.v2.DwService/GetExecutive"
	DwService_GetEquityFrozen_FullMethodName                 = "/api.dw.v2.DwService/GetEquityFrozen"
	DwService_GetHighConsumptionRestriction_FullMethodName   = "/api.dw.v2.DwService/GetHighConsumptionRestriction"
	DwService_GetJudicialStatics_FullMethodName              = "/api.dw.v2.DwService/GetJudicialStatics"
	DwService_GetCourtAnnouncement_FullMethodName            = "/api.dw.v2.DwService/GetCourtAnnouncement"
	DwService_GetDiscreditedDebtor_FullMethodName            = "/api.dw.v2.DwService/GetDiscreditedDebtor"
)

// DwServiceClient is the client API for DwService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DwServiceClient interface {
	GetEnterpriseIdent(ctx context.Context, in *GetEntIdentReq, opts ...grpc.CallOption) (*EntIdentResp, error)
	GetEnterpriseInfo(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStructResp, error)
	GetEnterpriseCredential(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntArrayResp, error)
	GetEnterpriseRankingList(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntArrayResp, error)
	GetEnterpriseIndustry(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error)
	GetEnterpriseProduct(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error)
	GetEnterpriseEquityTransparency(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EquityTransparencyResp, error)
	GetEntShareholders(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*ShareholdersResp, error)
	GetEntInvestment(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*InvestmentResp, error)
	GetEntBranches(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*BranchesResp, error)
	GetEntRelations(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EnterpriseRelations, error)
	GetForeclosureDisposition(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error)
	GetExecutive(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error)
	GetEquityFrozen(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error)
	GetHighConsumptionRestriction(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error)
	GetJudicialStatics(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error)
	GetCourtAnnouncement(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error)
	GetDiscreditedDebtor(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error)
}

type dwServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDwServiceClient(cc grpc.ClientConnInterface) DwServiceClient {
	return &dwServiceClient{cc}
}

func (c *dwServiceClient) GetEnterpriseIdent(ctx context.Context, in *GetEntIdentReq, opts ...grpc.CallOption) (*EntIdentResp, error) {
	out := new(EntIdentResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseIdent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseInfo(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStructResp, error) {
	out := new(EntStructResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseCredential(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntArrayResp, error) {
	out := new(EntArrayResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseRankingList(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntArrayResp, error) {
	out := new(EntArrayResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseRankingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseIndustry(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error) {
	out := new(EntStrArrayResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseIndustry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseProduct(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error) {
	out := new(EntStrArrayResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseEquityTransparency(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EquityTransparencyResp, error) {
	out := new(EquityTransparencyResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseEquityTransparency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEntShareholders(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*ShareholdersResp, error) {
	out := new(ShareholdersResp)
	err := c.cc.Invoke(ctx, DwService_GetEntShareholders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEntInvestment(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*InvestmentResp, error) {
	out := new(InvestmentResp)
	err := c.cc.Invoke(ctx, DwService_GetEntInvestment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEntBranches(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*BranchesResp, error) {
	out := new(BranchesResp)
	err := c.cc.Invoke(ctx, DwService_GetEntBranches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEntRelations(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EnterpriseRelations, error) {
	out := new(EnterpriseRelations)
	err := c.cc.Invoke(ctx, DwService_GetEntRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetForeclosureDisposition(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error) {
	out := new(EntStructResp)
	err := c.cc.Invoke(ctx, DwService_GetForeclosureDisposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetExecutive(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error) {
	out := new(EntStructResp)
	err := c.cc.Invoke(ctx, DwService_GetExecutive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEquityFrozen(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error) {
	out := new(EntStructResp)
	err := c.cc.Invoke(ctx, DwService_GetEquityFrozen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetHighConsumptionRestriction(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error) {
	out := new(EntStructResp)
	err := c.cc.Invoke(ctx, DwService_GetHighConsumptionRestriction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetJudicialStatics(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error) {
	out := new(EntStructResp)
	err := c.cc.Invoke(ctx, DwService_GetJudicialStatics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetCourtAnnouncement(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error) {
	out := new(EntStructResp)
	err := c.cc.Invoke(ctx, DwService_GetCourtAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetDiscreditedDebtor(ctx context.Context, in *GetEntInfoWithTime, opts ...grpc.CallOption) (*EntStructResp, error) {
	out := new(EntStructResp)
	err := c.cc.Invoke(ctx, DwService_GetDiscreditedDebtor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DwServiceServer is the server API for DwService service.
// All implementations must embed UnimplementedDwServiceServer
// for forward compatibility
type DwServiceServer interface {
	GetEnterpriseIdent(context.Context, *GetEntIdentReq) (*EntIdentResp, error)
	GetEnterpriseInfo(context.Context, *GetEntInfoReq) (*EntStructResp, error)
	GetEnterpriseCredential(context.Context, *GetEntInfoReq) (*EntArrayResp, error)
	GetEnterpriseRankingList(context.Context, *GetEntInfoReq) (*EntArrayResp, error)
	GetEnterpriseIndustry(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error)
	GetEnterpriseProduct(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error)
	GetEnterpriseEquityTransparency(context.Context, *GetEntInfoReq) (*EquityTransparencyResp, error)
	GetEntShareholders(context.Context, *GetEntInfoReq) (*ShareholdersResp, error)
	GetEntInvestment(context.Context, *GetEntInfoReq) (*InvestmentResp, error)
	GetEntBranches(context.Context, *GetEntInfoReq) (*BranchesResp, error)
	GetEntRelations(context.Context, *GetEntInfoReq) (*EnterpriseRelations, error)
	GetForeclosureDisposition(context.Context, *GetEntInfoWithTime) (*EntStructResp, error)
	GetExecutive(context.Context, *GetEntInfoWithTime) (*EntStructResp, error)
	GetEquityFrozen(context.Context, *GetEntInfoWithTime) (*EntStructResp, error)
	GetHighConsumptionRestriction(context.Context, *GetEntInfoWithTime) (*EntStructResp, error)
	GetJudicialStatics(context.Context, *GetEntInfoWithTime) (*EntStructResp, error)
	GetCourtAnnouncement(context.Context, *GetEntInfoWithTime) (*EntStructResp, error)
	GetDiscreditedDebtor(context.Context, *GetEntInfoWithTime) (*EntStructResp, error)
	mustEmbedUnimplementedDwServiceServer()
}

// UnimplementedDwServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDwServiceServer struct {
}

func (UnimplementedDwServiceServer) GetEnterpriseIdent(context.Context, *GetEntIdentReq) (*EntIdentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseIdent not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseInfo(context.Context, *GetEntInfoReq) (*EntStructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseInfo not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseCredential(context.Context, *GetEntInfoReq) (*EntArrayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseCredential not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseRankingList(context.Context, *GetEntInfoReq) (*EntArrayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseRankingList not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseIndustry(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseIndustry not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseProduct(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseProduct not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseEquityTransparency(context.Context, *GetEntInfoReq) (*EquityTransparencyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseEquityTransparency not implemented")
}
func (UnimplementedDwServiceServer) GetEntShareholders(context.Context, *GetEntInfoReq) (*ShareholdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntShareholders not implemented")
}
func (UnimplementedDwServiceServer) GetEntInvestment(context.Context, *GetEntInfoReq) (*InvestmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntInvestment not implemented")
}
func (UnimplementedDwServiceServer) GetEntBranches(context.Context, *GetEntInfoReq) (*BranchesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntBranches not implemented")
}
func (UnimplementedDwServiceServer) GetEntRelations(context.Context, *GetEntInfoReq) (*EnterpriseRelations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntRelations not implemented")
}
func (UnimplementedDwServiceServer) GetForeclosureDisposition(context.Context, *GetEntInfoWithTime) (*EntStructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForeclosureDisposition not implemented")
}
func (UnimplementedDwServiceServer) GetExecutive(context.Context, *GetEntInfoWithTime) (*EntStructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutive not implemented")
}
func (UnimplementedDwServiceServer) GetEquityFrozen(context.Context, *GetEntInfoWithTime) (*EntStructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquityFrozen not implemented")
}
func (UnimplementedDwServiceServer) GetHighConsumptionRestriction(context.Context, *GetEntInfoWithTime) (*EntStructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHighConsumptionRestriction not implemented")
}
func (UnimplementedDwServiceServer) GetJudicialStatics(context.Context, *GetEntInfoWithTime) (*EntStructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJudicialStatics not implemented")
}
func (UnimplementedDwServiceServer) GetCourtAnnouncement(context.Context, *GetEntInfoWithTime) (*EntStructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourtAnnouncement not implemented")
}
func (UnimplementedDwServiceServer) GetDiscreditedDebtor(context.Context, *GetEntInfoWithTime) (*EntStructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscreditedDebtor not implemented")
}
func (UnimplementedDwServiceServer) mustEmbedUnimplementedDwServiceServer() {}

// UnsafeDwServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DwServiceServer will
// result in compilation errors.
type UnsafeDwServiceServer interface {
	mustEmbedUnimplementedDwServiceServer()
}

func RegisterDwServiceServer(s grpc.ServiceRegistrar, srv DwServiceServer) {
	s.RegisterService(&DwService_ServiceDesc, srv)
}

func _DwService_GetEnterpriseIdent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntIdentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseIdent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseIdent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseIdent(ctx, req.(*GetEntIdentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseInfo(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseCredential(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseRankingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseRankingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseRankingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseRankingList(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseIndustry(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseProduct(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseEquityTransparency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseEquityTransparency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseEquityTransparency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseEquityTransparency(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEntShareholders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEntShareholders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEntShareholders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEntShareholders(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEntInvestment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEntInvestment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEntInvestment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEntInvestment(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEntBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEntBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEntBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEntBranches(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEntRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEntRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEntRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEntRelations(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetForeclosureDisposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoWithTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetForeclosureDisposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetForeclosureDisposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetForeclosureDisposition(ctx, req.(*GetEntInfoWithTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetExecutive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoWithTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetExecutive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetExecutive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetExecutive(ctx, req.(*GetEntInfoWithTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEquityFrozen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoWithTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEquityFrozen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEquityFrozen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEquityFrozen(ctx, req.(*GetEntInfoWithTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetHighConsumptionRestriction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoWithTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetHighConsumptionRestriction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetHighConsumptionRestriction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetHighConsumptionRestriction(ctx, req.(*GetEntInfoWithTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetJudicialStatics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoWithTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetJudicialStatics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetJudicialStatics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetJudicialStatics(ctx, req.(*GetEntInfoWithTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetCourtAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoWithTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetCourtAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetCourtAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetCourtAnnouncement(ctx, req.(*GetEntInfoWithTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetDiscreditedDebtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoWithTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetDiscreditedDebtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetDiscreditedDebtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetDiscreditedDebtor(ctx, req.(*GetEntInfoWithTime))
	}
	return interceptor(ctx, in, info, handler)
}

// DwService_ServiceDesc is the grpc.ServiceDesc for DwService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DwService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dw.v2.DwService",
	HandlerType: (*DwServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnterpriseIdent",
			Handler:    _DwService_GetEnterpriseIdent_Handler,
		},
		{
			MethodName: "GetEnterpriseInfo",
			Handler:    _DwService_GetEnterpriseInfo_Handler,
		},
		{
			MethodName: "GetEnterpriseCredential",
			Handler:    _DwService_GetEnterpriseCredential_Handler,
		},
		{
			MethodName: "GetEnterpriseRankingList",
			Handler:    _DwService_GetEnterpriseRankingList_Handler,
		},
		{
			MethodName: "GetEnterpriseIndustry",
			Handler:    _DwService_GetEnterpriseIndustry_Handler,
		},
		{
			MethodName: "GetEnterpriseProduct",
			Handler:    _DwService_GetEnterpriseProduct_Handler,
		},
		{
			MethodName: "GetEnterpriseEquityTransparency",
			Handler:    _DwService_GetEnterpriseEquityTransparency_Handler,
		},
		{
			MethodName: "GetEntShareholders",
			Handler:    _DwService_GetEntShareholders_Handler,
		},
		{
			MethodName: "GetEntInvestment",
			Handler:    _DwService_GetEntInvestment_Handler,
		},
		{
			MethodName: "GetEntBranches",
			Handler:    _DwService_GetEntBranches_Handler,
		},
		{
			MethodName: "GetEntRelations",
			Handler:    _DwService_GetEntRelations_Handler,
		},
		{
			MethodName: "GetForeclosureDisposition",
			Handler:    _DwService_GetForeclosureDisposition_Handler,
		},
		{
			MethodName: "GetExecutive",
			Handler:    _DwService_GetExecutive_Handler,
		},
		{
			MethodName: "GetEquityFrozen",
			Handler:    _DwService_GetEquityFrozen_Handler,
		},
		{
			MethodName: "GetHighConsumptionRestriction",
			Handler:    _DwService_GetHighConsumptionRestriction_Handler,
		},
		{
			MethodName: "GetJudicialStatics",
			Handler:    _DwService_GetJudicialStatics_Handler,
		},
		{
			MethodName: "GetCourtAnnouncement",
			Handler:    _DwService_GetCourtAnnouncement_Handler,
		},
		{
			MethodName: "GetDiscreditedDebtor",
			Handler:    _DwService_GetDiscreditedDebtor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dw/v2/dw.proto",
}
