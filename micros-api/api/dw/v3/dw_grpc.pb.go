// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: api/dw/v3/dw.proto

package dwV3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DwService_GetUscIdByEnterpriseName_FullMethodName           = "/api.dw.v3.DwService/GetUscIdByEnterpriseName"
	DwService_GetEntRelations_FullMethodName                    = "/api.dw.v3.DwService/GetEntRelations"
	DwService_GetEnterpriseInfo_FullMethodName                  = "/api.dw.v3.DwService/GetEnterpriseInfo"
	DwService_GetEntEquityTransparency_FullMethodName           = "/api.dw.v3.DwService/GetEntEquityTransparency"
	DwService_GetEntEquityTransparencyConclusion_FullMethodName = "/api.dw.v3.DwService/GetEntEquityTransparencyConclusion"
	DwService_GetEntShareholders_FullMethodName                 = "/api.dw.v3.DwService/GetEntShareholders"
	DwService_GetEntInvestment_FullMethodName                   = "/api.dw.v3.DwService/GetEntInvestment"
	DwService_GetEntBranches_FullMethodName                     = "/api.dw.v3.DwService/GetEntBranches"
	DwService_GetCaseRegistrationInfo_FullMethodName            = "/api.dw.v3.DwService/GetCaseRegistrationInfo"
	DwService_GetForeclosureDisposition_FullMethodName          = "/api.dw.v3.DwService/GetForeclosureDisposition"
	DwService_GetExecutive_FullMethodName                       = "/api.dw.v3.DwService/GetExecutive"
	DwService_GetEquityFrozen_FullMethodName                    = "/api.dw.v3.DwService/GetEquityFrozen"
	DwService_GetHighConsumptionRestriction_FullMethodName      = "/api.dw.v3.DwService/GetHighConsumptionRestriction"
	DwService_GetCourtAnnouncement_FullMethodName               = "/api.dw.v3.DwService/GetCourtAnnouncement"
	DwService_GetEnterpriseManagerInfo_FullMethodName           = "/api.dw.v3.DwService/GetEnterpriseManagerInfo"
	DwService_GetDiscreditedDebtor_FullMethodName               = "/api.dw.v3.DwService/GetDiscreditedDebtor"
	DwService_GetEnterpriseCredential_FullMethodName            = "/api.dw.v3.DwService/GetEnterpriseCredential"
	DwService_GetEnterpriseRankingList_FullMethodName           = "/api.dw.v3.DwService/GetEnterpriseRankingList"
	DwService_GetCollStat_FullMethodName                        = "/api.dw.v3.DwService/GetCollStat"
	DwService_GetMacroEconomyData_FullMethodName                = "/api.dw.v3.DwService/GetMacroEconomyData"
	DwService_InsertArtifactData_FullMethodName                 = "/api.dw.v3.DwService/InsertArtifactData"
	DwService_GetArtifactData_FullMethodName                    = "/api.dw.v3.DwService/GetArtifactData"
	DwService_DeleteArtifactData_FullMethodName                 = "/api.dw.v3.DwService/DeleteArtifactData"
)

// DwServiceClient is the client API for DwService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DwServiceClient interface {
	GetUscIdByEnterpriseName(ctx context.Context, in *GetUscIdByEnterpriseNameReq, opts ...grpc.CallOption) (*GetUscIdByEnterpriseNameResp, error)
	GetEntRelations(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*EnterpriseRelationsResp, error)
	GetEnterpriseInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataDictResp, error)
	GetEntEquityTransparency(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEntEquityTransparencyConclusion(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataDictResp, error)
	GetEntShareholders(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEntInvestment(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEntBranches(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetCaseRegistrationInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetForeclosureDisposition(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetExecutive(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEquityFrozen(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetHighConsumptionRestriction(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetCourtAnnouncement(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEnterpriseManagerInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetDiscreditedDebtor(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEnterpriseCredential(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	GetEnterpriseRankingList(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetEntRankingListResp, error)
	GetCollStat(ctx context.Context, in *GetCollStatReq, opts ...grpc.CallOption) (*GetCollStatResp, error)
	GetMacroEconomyData(ctx context.Context, in *GetMacroEconomyDataReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	InsertArtifactData(ctx context.Context, in *InsertArtifactDataReq, opts ...grpc.CallOption) (*InsertArtifactDataResp, error)
	GetArtifactData(ctx context.Context, in *GetArtifactDataReq, opts ...grpc.CallOption) (*GetDataListResp, error)
	DeleteArtifactData(ctx context.Context, in *DeleteArtifactDataReq, opts ...grpc.CallOption) (*DeleteArtifactDataResp, error)
}

type dwServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDwServiceClient(cc grpc.ClientConnInterface) DwServiceClient {
	return &dwServiceClient{cc}
}

func (c *dwServiceClient) GetUscIdByEnterpriseName(ctx context.Context, in *GetUscIdByEnterpriseNameReq, opts ...grpc.CallOption) (*GetUscIdByEnterpriseNameResp, error) {
	out := new(GetUscIdByEnterpriseNameResp)
	err := c.cc.Invoke(ctx, DwService_GetUscIdByEnterpriseName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEntRelations(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*EnterpriseRelationsResp, error) {
	out := new(EnterpriseRelationsResp)
	err := c.cc.Invoke(ctx, DwService_GetEntRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataDictResp, error) {
	out := new(GetDataDictResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEntEquityTransparency(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetEntEquityTransparency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEntEquityTransparencyConclusion(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataDictResp, error) {
	out := new(GetDataDictResp)
	err := c.cc.Invoke(ctx, DwService_GetEntEquityTransparencyConclusion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEntShareholders(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetEntShareholders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEntInvestment(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetEntInvestment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEntBranches(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetEntBranches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetCaseRegistrationInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetCaseRegistrationInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetForeclosureDisposition(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetForeclosureDisposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetExecutive(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetExecutive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEquityFrozen(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetEquityFrozen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetHighConsumptionRestriction(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetHighConsumptionRestriction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetCourtAnnouncement(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetCourtAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseManagerInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseManagerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetDiscreditedDebtor(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetDiscreditedDebtor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseCredential(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseRankingList(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...grpc.CallOption) (*GetEntRankingListResp, error) {
	out := new(GetEntRankingListResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseRankingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetCollStat(ctx context.Context, in *GetCollStatReq, opts ...grpc.CallOption) (*GetCollStatResp, error) {
	out := new(GetCollStatResp)
	err := c.cc.Invoke(ctx, DwService_GetCollStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetMacroEconomyData(ctx context.Context, in *GetMacroEconomyDataReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetMacroEconomyData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) InsertArtifactData(ctx context.Context, in *InsertArtifactDataReq, opts ...grpc.CallOption) (*InsertArtifactDataResp, error) {
	out := new(InsertArtifactDataResp)
	err := c.cc.Invoke(ctx, DwService_InsertArtifactData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetArtifactData(ctx context.Context, in *GetArtifactDataReq, opts ...grpc.CallOption) (*GetDataListResp, error) {
	out := new(GetDataListResp)
	err := c.cc.Invoke(ctx, DwService_GetArtifactData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) DeleteArtifactData(ctx context.Context, in *DeleteArtifactDataReq, opts ...grpc.CallOption) (*DeleteArtifactDataResp, error) {
	out := new(DeleteArtifactDataResp)
	err := c.cc.Invoke(ctx, DwService_DeleteArtifactData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DwServiceServer is the server API for DwService service.
// All implementations must embed UnimplementedDwServiceServer
// for forward compatibility
type DwServiceServer interface {
	GetUscIdByEnterpriseName(context.Context, *GetUscIdByEnterpriseNameReq) (*GetUscIdByEnterpriseNameResp, error)
	GetEntRelations(context.Context, *GetDataBeforeTimePointReq) (*EnterpriseRelationsResp, error)
	GetEnterpriseInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataDictResp, error)
	GetEntEquityTransparency(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntEquityTransparencyConclusion(context.Context, *GetDataBeforeTimePointReq) (*GetDataDictResp, error)
	GetEntShareholders(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntInvestment(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntBranches(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetCaseRegistrationInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetForeclosureDisposition(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetExecutive(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEquityFrozen(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetHighConsumptionRestriction(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetCourtAnnouncement(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEnterpriseManagerInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetDiscreditedDebtor(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEnterpriseCredential(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEnterpriseRankingList(context.Context, *GetDataBeforeTimePointReq) (*GetEntRankingListResp, error)
	GetCollStat(context.Context, *GetCollStatReq) (*GetCollStatResp, error)
	GetMacroEconomyData(context.Context, *GetMacroEconomyDataReq) (*GetDataListResp, error)
	InsertArtifactData(context.Context, *InsertArtifactDataReq) (*InsertArtifactDataResp, error)
	GetArtifactData(context.Context, *GetArtifactDataReq) (*GetDataListResp, error)
	DeleteArtifactData(context.Context, *DeleteArtifactDataReq) (*DeleteArtifactDataResp, error)
	mustEmbedUnimplementedDwServiceServer()
}

// UnimplementedDwServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDwServiceServer struct {
}

func (UnimplementedDwServiceServer) GetUscIdByEnterpriseName(context.Context, *GetUscIdByEnterpriseNameReq) (*GetUscIdByEnterpriseNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUscIdByEnterpriseName not implemented")
}
func (UnimplementedDwServiceServer) GetEntRelations(context.Context, *GetDataBeforeTimePointReq) (*EnterpriseRelationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntRelations not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseInfo not implemented")
}
func (UnimplementedDwServiceServer) GetEntEquityTransparency(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntEquityTransparency not implemented")
}
func (UnimplementedDwServiceServer) GetEntEquityTransparencyConclusion(context.Context, *GetDataBeforeTimePointReq) (*GetDataDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntEquityTransparencyConclusion not implemented")
}
func (UnimplementedDwServiceServer) GetEntShareholders(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntShareholders not implemented")
}
func (UnimplementedDwServiceServer) GetEntInvestment(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntInvestment not implemented")
}
func (UnimplementedDwServiceServer) GetEntBranches(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntBranches not implemented")
}
func (UnimplementedDwServiceServer) GetCaseRegistrationInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaseRegistrationInfo not implemented")
}
func (UnimplementedDwServiceServer) GetForeclosureDisposition(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForeclosureDisposition not implemented")
}
func (UnimplementedDwServiceServer) GetExecutive(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutive not implemented")
}
func (UnimplementedDwServiceServer) GetEquityFrozen(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquityFrozen not implemented")
}
func (UnimplementedDwServiceServer) GetHighConsumptionRestriction(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHighConsumptionRestriction not implemented")
}
func (UnimplementedDwServiceServer) GetCourtAnnouncement(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourtAnnouncement not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseManagerInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseManagerInfo not implemented")
}
func (UnimplementedDwServiceServer) GetDiscreditedDebtor(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscreditedDebtor not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseCredential(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseCredential not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseRankingList(context.Context, *GetDataBeforeTimePointReq) (*GetEntRankingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseRankingList not implemented")
}
func (UnimplementedDwServiceServer) GetCollStat(context.Context, *GetCollStatReq) (*GetCollStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollStat not implemented")
}
func (UnimplementedDwServiceServer) GetMacroEconomyData(context.Context, *GetMacroEconomyDataReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacroEconomyData not implemented")
}
func (UnimplementedDwServiceServer) InsertArtifactData(context.Context, *InsertArtifactDataReq) (*InsertArtifactDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertArtifactData not implemented")
}
func (UnimplementedDwServiceServer) GetArtifactData(context.Context, *GetArtifactDataReq) (*GetDataListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactData not implemented")
}
func (UnimplementedDwServiceServer) DeleteArtifactData(context.Context, *DeleteArtifactDataReq) (*DeleteArtifactDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifactData not implemented")
}
func (UnimplementedDwServiceServer) mustEmbedUnimplementedDwServiceServer() {}

// UnsafeDwServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DwServiceServer will
// result in compilation errors.
type UnsafeDwServiceServer interface {
	mustEmbedUnimplementedDwServiceServer()
}

func RegisterDwServiceServer(s grpc.ServiceRegistrar, srv DwServiceServer) {
	s.RegisterService(&DwService_ServiceDesc, srv)
}

func _DwService_GetUscIdByEnterpriseName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUscIdByEnterpriseNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetUscIdByEnterpriseName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetUscIdByEnterpriseName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetUscIdByEnterpriseName(ctx, req.(*GetUscIdByEnterpriseNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEntRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEntRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEntRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEntRelations(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseInfo(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEntEquityTransparency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEntEquityTransparency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEntEquityTransparency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEntEquityTransparency(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEntEquityTransparencyConclusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEntEquityTransparencyConclusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEntEquityTransparencyConclusion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEntEquityTransparencyConclusion(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEntShareholders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEntShareholders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEntShareholders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEntShareholders(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEntInvestment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEntInvestment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEntInvestment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEntInvestment(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEntBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEntBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEntBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEntBranches(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetCaseRegistrationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetCaseRegistrationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetCaseRegistrationInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetCaseRegistrationInfo(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetForeclosureDisposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetForeclosureDisposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetForeclosureDisposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetForeclosureDisposition(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetExecutive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetExecutive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetExecutive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetExecutive(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEquityFrozen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEquityFrozen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEquityFrozen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEquityFrozen(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetHighConsumptionRestriction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetHighConsumptionRestriction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetHighConsumptionRestriction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetHighConsumptionRestriction(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetCourtAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetCourtAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetCourtAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetCourtAnnouncement(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseManagerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseManagerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseManagerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseManagerInfo(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetDiscreditedDebtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetDiscreditedDebtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetDiscreditedDebtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetDiscreditedDebtor(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseCredential(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseRankingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBeforeTimePointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseRankingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseRankingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseRankingList(ctx, req.(*GetDataBeforeTimePointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetCollStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetCollStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetCollStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetCollStat(ctx, req.(*GetCollStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetMacroEconomyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacroEconomyDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetMacroEconomyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetMacroEconomyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetMacroEconomyData(ctx, req.(*GetMacroEconomyDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_InsertArtifactData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertArtifactDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).InsertArtifactData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_InsertArtifactData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).InsertArtifactData(ctx, req.(*InsertArtifactDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetArtifactData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetArtifactData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetArtifactData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetArtifactData(ctx, req.(*GetArtifactDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_DeleteArtifactData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtifactDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).DeleteArtifactData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_DeleteArtifactData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).DeleteArtifactData(ctx, req.(*DeleteArtifactDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DwService_ServiceDesc is the grpc.ServiceDesc for DwService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DwService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dw.v3.DwService",
	HandlerType: (*DwServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUscIdByEnterpriseName",
			Handler:    _DwService_GetUscIdByEnterpriseName_Handler,
		},
		{
			MethodName: "GetEntRelations",
			Handler:    _DwService_GetEntRelations_Handler,
		},
		{
			MethodName: "GetEnterpriseInfo",
			Handler:    _DwService_GetEnterpriseInfo_Handler,
		},
		{
			MethodName: "GetEntEquityTransparency",
			Handler:    _DwService_GetEntEquityTransparency_Handler,
		},
		{
			MethodName: "GetEntEquityTransparencyConclusion",
			Handler:    _DwService_GetEntEquityTransparencyConclusion_Handler,
		},
		{
			MethodName: "GetEntShareholders",
			Handler:    _DwService_GetEntShareholders_Handler,
		},
		{
			MethodName: "GetEntInvestment",
			Handler:    _DwService_GetEntInvestment_Handler,
		},
		{
			MethodName: "GetEntBranches",
			Handler:    _DwService_GetEntBranches_Handler,
		},
		{
			MethodName: "GetCaseRegistrationInfo",
			Handler:    _DwService_GetCaseRegistrationInfo_Handler,
		},
		{
			MethodName: "GetForeclosureDisposition",
			Handler:    _DwService_GetForeclosureDisposition_Handler,
		},
		{
			MethodName: "GetExecutive",
			Handler:    _DwService_GetExecutive_Handler,
		},
		{
			MethodName: "GetEquityFrozen",
			Handler:    _DwService_GetEquityFrozen_Handler,
		},
		{
			MethodName: "GetHighConsumptionRestriction",
			Handler:    _DwService_GetHighConsumptionRestriction_Handler,
		},
		{
			MethodName: "GetCourtAnnouncement",
			Handler:    _DwService_GetCourtAnnouncement_Handler,
		},
		{
			MethodName: "GetEnterpriseManagerInfo",
			Handler:    _DwService_GetEnterpriseManagerInfo_Handler,
		},
		{
			MethodName: "GetDiscreditedDebtor",
			Handler:    _DwService_GetDiscreditedDebtor_Handler,
		},
		{
			MethodName: "GetEnterpriseCredential",
			Handler:    _DwService_GetEnterpriseCredential_Handler,
		},
		{
			MethodName: "GetEnterpriseRankingList",
			Handler:    _DwService_GetEnterpriseRankingList_Handler,
		},
		{
			MethodName: "GetCollStat",
			Handler:    _DwService_GetCollStat_Handler,
		},
		{
			MethodName: "GetMacroEconomyData",
			Handler:    _DwService_GetMacroEconomyData_Handler,
		},
		{
			MethodName: "InsertArtifactData",
			Handler:    _DwService_InsertArtifactData_Handler,
		},
		{
			MethodName: "GetArtifactData",
			Handler:    _DwService_GetArtifactData_Handler,
		},
		{
			MethodName: "DeleteArtifactData",
			Handler:    _DwService_DeleteArtifactData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dw/v3/dw.proto",
}
