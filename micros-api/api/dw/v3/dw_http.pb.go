// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.20.3
// source: api/dw/v3/dw.proto

package dwV3

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDwServiceDeleteArtifactData = "/api.dw.v3.DwService/DeleteArtifactData"
const OperationDwServiceGetArtifactData = "/api.dw.v3.DwService/GetArtifactData"
const OperationDwServiceGetCaseRegistrationInfo = "/api.dw.v3.DwService/GetCaseRegistrationInfo"
const OperationDwServiceGetCollStat = "/api.dw.v3.DwService/GetCollStat"
const OperationDwServiceGetCourtAnnouncement = "/api.dw.v3.DwService/GetCourtAnnouncement"
const OperationDwServiceGetDiscreditedDebtor = "/api.dw.v3.DwService/GetDiscreditedDebtor"
const OperationDwServiceGetEntBranches = "/api.dw.v3.DwService/GetEntBranches"
const OperationDwServiceGetEntEquityTransparency = "/api.dw.v3.DwService/GetEntEquityTransparency"
const OperationDwServiceGetEntEquityTransparencyConclusion = "/api.dw.v3.DwService/GetEntEquityTransparencyConclusion"
const OperationDwServiceGetEntInvestment = "/api.dw.v3.DwService/GetEntInvestment"
const OperationDwServiceGetEntRelations = "/api.dw.v3.DwService/GetEntRelations"
const OperationDwServiceGetEntShareholders = "/api.dw.v3.DwService/GetEntShareholders"
const OperationDwServiceGetEnterpriseCredential = "/api.dw.v3.DwService/GetEnterpriseCredential"
const OperationDwServiceGetEnterpriseInfo = "/api.dw.v3.DwService/GetEnterpriseInfo"
const OperationDwServiceGetEnterpriseManagerInfo = "/api.dw.v3.DwService/GetEnterpriseManagerInfo"
const OperationDwServiceGetEnterpriseRankingList = "/api.dw.v3.DwService/GetEnterpriseRankingList"
const OperationDwServiceGetEquityFrozen = "/api.dw.v3.DwService/GetEquityFrozen"
const OperationDwServiceGetExecutive = "/api.dw.v3.DwService/GetExecutive"
const OperationDwServiceGetForeclosureDisposition = "/api.dw.v3.DwService/GetForeclosureDisposition"
const OperationDwServiceGetHighConsumptionRestriction = "/api.dw.v3.DwService/GetHighConsumptionRestriction"
const OperationDwServiceGetMacroEconomyData = "/api.dw.v3.DwService/GetMacroEconomyData"
const OperationDwServiceGetUscIdByEnterpriseName = "/api.dw.v3.DwService/GetUscIdByEnterpriseName"
const OperationDwServiceInsertArtifactData = "/api.dw.v3.DwService/InsertArtifactData"

type DwServiceHTTPServer interface {
	DeleteArtifactData(context.Context, *DeleteArtifactDataReq) (*DeleteArtifactDataResp, error)
	GetArtifactData(context.Context, *GetArtifactDataReq) (*GetDataListResp, error)
	GetCaseRegistrationInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetCollStat(context.Context, *GetCollStatReq) (*GetCollStatResp, error)
	GetCourtAnnouncement(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetDiscreditedDebtor(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntBranches(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntEquityTransparency(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntEquityTransparencyConclusion(context.Context, *GetDataBeforeTimePointReq) (*GetDataDictResp, error)
	GetEntInvestment(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEntRelations(context.Context, *GetDataBeforeTimePointReq) (*EnterpriseRelationsResp, error)
	GetEntShareholders(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEnterpriseCredential(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEnterpriseInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataDictResp, error)
	GetEnterpriseManagerInfo(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetEnterpriseRankingList(context.Context, *GetDataBeforeTimePointReq) (*GetEntRankingListResp, error)
	GetEquityFrozen(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetExecutive(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetForeclosureDisposition(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetHighConsumptionRestriction(context.Context, *GetDataBeforeTimePointReq) (*GetDataListResp, error)
	GetMacroEconomyData(context.Context, *GetMacroEconomyDataReq) (*GetDataListResp, error)
	GetUscIdByEnterpriseName(context.Context, *GetUscIdByEnterpriseNameReq) (*GetUscIdByEnterpriseNameResp, error)
	InsertArtifactData(context.Context, *InsertArtifactDataReq) (*InsertArtifactDataResp, error)
}

func RegisterDwServiceHTTPServer(s *http.Server, srv DwServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/micros/dw/v3/enterprise/ident", _DwService_GetUscIdByEnterpriseName0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/relations", _DwService_GetEntRelations0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/info", _DwService_GetEnterpriseInfo0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/equity-transparency", _DwService_GetEntEquityTransparency0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/equity-transparency/conclusion", _DwService_GetEntEquityTransparencyConclusion0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/shareholders", _DwService_GetEntShareholders0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/investments", _DwService_GetEntInvestment0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/branches", _DwService_GetEntBranches0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/case-regis", _DwService_GetCaseRegistrationInfo0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/judiciary/foreclosure-disposition", _DwService_GetForeclosureDisposition0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/judiciary/executive", _DwService_GetExecutive0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/judiciary/equity-frozen", _DwService_GetEquityFrozen0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/judiciary/high-consumption-restriction", _DwService_GetHighConsumptionRestriction0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/judiciary/court-announcement", _DwService_GetCourtAnnouncement0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/managers-info", _DwService_GetEnterpriseManagerInfo0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/judiciary/discredited-debtor", _DwService_GetDiscreditedDebtor0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/credential", _DwService_GetEnterpriseCredential0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/ranking-list", _DwService_GetEnterpriseRankingList0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/stat", _DwService_GetCollStat0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/enterprise/macro-econ", _DwService_GetMacroEconomyData0_HTTP_Handler(srv))
	r.POST("/micros/dw/v3/artifact-data", _DwService_InsertArtifactData0_HTTP_Handler(srv))
	r.GET("/micros/dw/v3/artifact-data", _DwService_GetArtifactData0_HTTP_Handler(srv))
	r.POST("/micros/dw/v3/artifact-data/delete", _DwService_DeleteArtifactData0_HTTP_Handler(srv))
}

func _DwService_GetUscIdByEnterpriseName0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUscIdByEnterpriseNameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetUscIdByEnterpriseName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUscIdByEnterpriseName(ctx, req.(*GetUscIdByEnterpriseNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUscIdByEnterpriseNameResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEntRelations0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEntRelations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEntRelations(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EnterpriseRelationsResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEnterpriseInfo0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseInfo(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataDictResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEntEquityTransparency0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEntEquityTransparency)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEntEquityTransparency(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEntEquityTransparencyConclusion0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEntEquityTransparencyConclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEntEquityTransparencyConclusion(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataDictResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEntShareholders0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEntShareholders)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEntShareholders(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEntInvestment0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEntInvestment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEntInvestment(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEntBranches0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEntBranches)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEntBranches(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetCaseRegistrationInfo0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetCaseRegistrationInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCaseRegistrationInfo(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetForeclosureDisposition0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetForeclosureDisposition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetForeclosureDisposition(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetExecutive0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetExecutive)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExecutive(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEquityFrozen0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEquityFrozen)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEquityFrozen(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetHighConsumptionRestriction0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetHighConsumptionRestriction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHighConsumptionRestriction(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetCourtAnnouncement0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetCourtAnnouncement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCourtAnnouncement(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEnterpriseManagerInfo0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseManagerInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseManagerInfo(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetDiscreditedDebtor0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetDiscreditedDebtor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDiscreditedDebtor(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEnterpriseCredential0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseCredential)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseCredential(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetEnterpriseRankingList0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataBeforeTimePointReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetEnterpriseRankingList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEnterpriseRankingList(ctx, req.(*GetDataBeforeTimePointReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEntRankingListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetCollStat0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollStatReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetCollStat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollStat(ctx, req.(*GetCollStatReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollStatResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetMacroEconomyData0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMacroEconomyDataReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetMacroEconomyData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMacroEconomyData(ctx, req.(*GetMacroEconomyDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_InsertArtifactData0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InsertArtifactDataReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceInsertArtifactData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertArtifactData(ctx, req.(*InsertArtifactDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InsertArtifactDataResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_GetArtifactData0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArtifactDataReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceGetArtifactData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArtifactData(ctx, req.(*GetArtifactDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataListResp)
		return ctx.Result(200, reply)
	}
}

func _DwService_DeleteArtifactData0_HTTP_Handler(srv DwServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteArtifactDataReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDwServiceDeleteArtifactData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteArtifactData(ctx, req.(*DeleteArtifactDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteArtifactDataResp)
		return ctx.Result(200, reply)
	}
}

type DwServiceHTTPClient interface {
	DeleteArtifactData(ctx context.Context, req *DeleteArtifactDataReq, opts ...http.CallOption) (rsp *DeleteArtifactDataResp, err error)
	GetArtifactData(ctx context.Context, req *GetArtifactDataReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetCaseRegistrationInfo(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetCollStat(ctx context.Context, req *GetCollStatReq, opts ...http.CallOption) (rsp *GetCollStatResp, err error)
	GetCourtAnnouncement(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetDiscreditedDebtor(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetEntBranches(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetEntEquityTransparency(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetEntEquityTransparencyConclusion(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataDictResp, err error)
	GetEntInvestment(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetEntRelations(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *EnterpriseRelationsResp, err error)
	GetEntShareholders(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetEnterpriseCredential(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetEnterpriseInfo(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataDictResp, err error)
	GetEnterpriseManagerInfo(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetEnterpriseRankingList(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetEntRankingListResp, err error)
	GetEquityFrozen(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetExecutive(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetForeclosureDisposition(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetHighConsumptionRestriction(ctx context.Context, req *GetDataBeforeTimePointReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetMacroEconomyData(ctx context.Context, req *GetMacroEconomyDataReq, opts ...http.CallOption) (rsp *GetDataListResp, err error)
	GetUscIdByEnterpriseName(ctx context.Context, req *GetUscIdByEnterpriseNameReq, opts ...http.CallOption) (rsp *GetUscIdByEnterpriseNameResp, err error)
	InsertArtifactData(ctx context.Context, req *InsertArtifactDataReq, opts ...http.CallOption) (rsp *InsertArtifactDataResp, err error)
}

type DwServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDwServiceHTTPClient(client *http.Client) DwServiceHTTPClient {
	return &DwServiceHTTPClientImpl{client}
}

func (c *DwServiceHTTPClientImpl) DeleteArtifactData(ctx context.Context, in *DeleteArtifactDataReq, opts ...http.CallOption) (*DeleteArtifactDataResp, error) {
	var out DeleteArtifactDataResp
	pattern := "/micros/dw/v3/artifact-data/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDwServiceDeleteArtifactData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetArtifactData(ctx context.Context, in *GetArtifactDataReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/artifact-data"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetArtifactData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetCaseRegistrationInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/case-regis"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetCaseRegistrationInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetCollStat(ctx context.Context, in *GetCollStatReq, opts ...http.CallOption) (*GetCollStatResp, error) {
	var out GetCollStatResp
	pattern := "/micros/dw/v3/enterprise/stat"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetCollStat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetCourtAnnouncement(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/judiciary/court-announcement"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetCourtAnnouncement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetDiscreditedDebtor(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/judiciary/discredited-debtor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetDiscreditedDebtor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEntBranches(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/branches"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEntBranches))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEntEquityTransparency(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/equity-transparency"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEntEquityTransparency))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEntEquityTransparencyConclusion(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataDictResp, error) {
	var out GetDataDictResp
	pattern := "/micros/dw/v3/enterprise/equity-transparency/conclusion"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEntEquityTransparencyConclusion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEntInvestment(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/investments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEntInvestment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEntRelations(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*EnterpriseRelationsResp, error) {
	var out EnterpriseRelationsResp
	pattern := "/micros/dw/v3/enterprise/relations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEntRelations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEntShareholders(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/shareholders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEntShareholders))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseCredential(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/credential"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseCredential))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataDictResp, error) {
	var out GetDataDictResp
	pattern := "/micros/dw/v3/enterprise/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseManagerInfo(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/managers-info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseManagerInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEnterpriseRankingList(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetEntRankingListResp, error) {
	var out GetEntRankingListResp
	pattern := "/micros/dw/v3/enterprise/ranking-list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEnterpriseRankingList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetEquityFrozen(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/judiciary/equity-frozen"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetEquityFrozen))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetExecutive(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/judiciary/executive"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetExecutive))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetForeclosureDisposition(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/judiciary/foreclosure-disposition"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetForeclosureDisposition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetHighConsumptionRestriction(ctx context.Context, in *GetDataBeforeTimePointReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/judiciary/high-consumption-restriction"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetHighConsumptionRestriction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetMacroEconomyData(ctx context.Context, in *GetMacroEconomyDataReq, opts ...http.CallOption) (*GetDataListResp, error) {
	var out GetDataListResp
	pattern := "/micros/dw/v3/enterprise/macro-econ"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetMacroEconomyData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) GetUscIdByEnterpriseName(ctx context.Context, in *GetUscIdByEnterpriseNameReq, opts ...http.CallOption) (*GetUscIdByEnterpriseNameResp, error) {
	var out GetUscIdByEnterpriseNameResp
	pattern := "/micros/dw/v3/enterprise/ident"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDwServiceGetUscIdByEnterpriseName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DwServiceHTTPClientImpl) InsertArtifactData(ctx context.Context, in *InsertArtifactDataReq, opts ...http.CallOption) (*InsertArtifactDataResp, error) {
	var out InsertArtifactDataResp
	pattern := "/micros/dw/v3/artifact-data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDwServiceInsertArtifactData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
