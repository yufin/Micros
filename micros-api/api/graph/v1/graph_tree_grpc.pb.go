// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/graph/v1/graph_tree.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TreeGraphService_GetTreeNode_FullMethodName          = "/api.graph.v1.TreeGraphService/GetTreeNode"
	TreeGraphService_GetChildren_FullMethodName          = "/api.graph.v1.TreeGraphService/GetChildren"
	TreeGraphService_GetTitleAutoComplete_FullMethodName = "/api.graph.v1.TreeGraphService/GetTitleAutoComplete"
	TreeGraphService_GetPathBetween_FullMethodName       = "/api.graph.v1.TreeGraphService/GetPathTo"
	TreeGraphService_GetConst_FullMethodName             = "/api.graph.v1.TreeGraphService/GetConst"
)

// TreeGraphServiceClient is the client API for TreeGraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreeGraphServiceClient interface {
	GetTreeNode(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TreeNodeResp, error)
	GetChildren(ctx context.Context, in *PgIdReq, opts ...grpc.CallOption) (*TreeNodesResp, error)
	GetTitleAutoComplete(ctx context.Context, in *TitleAutoCompleteReq, opts ...grpc.CallOption) (*TitleAutoCompleteResp, error)
	GetPathBetween(ctx context.Context, in *GetPathReq, opts ...grpc.CallOption) (*TreeNodeResp, error)
	GetConst(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConstResp, error)
}

type treeGraphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTreeGraphServiceClient(cc grpc.ClientConnInterface) TreeGraphServiceClient {
	return &treeGraphServiceClient{cc}
}

func (c *treeGraphServiceClient) GetTreeNode(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TreeNodeResp, error) {
	out := new(TreeNodeResp)
	err := c.cc.Invoke(ctx, TreeGraphService_GetTreeNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeGraphServiceClient) GetChildren(ctx context.Context, in *PgIdReq, opts ...grpc.CallOption) (*TreeNodesResp, error) {
	out := new(TreeNodesResp)
	err := c.cc.Invoke(ctx, TreeGraphService_GetChildren_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeGraphServiceClient) GetTitleAutoComplete(ctx context.Context, in *TitleAutoCompleteReq, opts ...grpc.CallOption) (*TitleAutoCompleteResp, error) {
	out := new(TitleAutoCompleteResp)
	err := c.cc.Invoke(ctx, TreeGraphService_GetTitleAutoComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeGraphServiceClient) GetPathBetween(ctx context.Context, in *GetPathReq, opts ...grpc.CallOption) (*TreeNodeResp, error) {
	out := new(TreeNodeResp)
	err := c.cc.Invoke(ctx, TreeGraphService_GetPathBetween_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeGraphServiceClient) GetConst(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConstResp, error) {
	out := new(ConstResp)
	err := c.cc.Invoke(ctx, TreeGraphService_GetConst_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreeGraphServiceServer is the server API for TreeGraphService service.
// All implementations must embed UnimplementedTreeGraphServiceServer
// for forward compatibility
type TreeGraphServiceServer interface {
	GetTreeNode(context.Context, *IdReq) (*TreeNodeResp, error)
	GetChildren(context.Context, *PgIdReq) (*TreeNodesResp, error)
	GetTitleAutoComplete(context.Context, *TitleAutoCompleteReq) (*TitleAutoCompleteResp, error)
	GetPathBetween(context.Context, *GetPathReq) (*TreeNodeResp, error)
	GetConst(context.Context, *emptypb.Empty) (*ConstResp, error)
	mustEmbedUnimplementedTreeGraphServiceServer()
}

// UnimplementedTreeGraphServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTreeGraphServiceServer struct {
}

func (UnimplementedTreeGraphServiceServer) GetTreeNode(context.Context, *IdReq) (*TreeNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeNode not implemented")
}
func (UnimplementedTreeGraphServiceServer) GetChildren(context.Context, *PgIdReq) (*TreeNodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildren not implemented")
}
func (UnimplementedTreeGraphServiceServer) GetTitleAutoComplete(context.Context, *TitleAutoCompleteReq) (*TitleAutoCompleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitleAutoComplete not implemented")
}
func (UnimplementedTreeGraphServiceServer) GetPathBetween(context.Context, *GetPathReq) (*TreeNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPathTo not implemented")
}
func (UnimplementedTreeGraphServiceServer) GetConst(context.Context, *emptypb.Empty) (*ConstResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConst not implemented")
}
func (UnimplementedTreeGraphServiceServer) mustEmbedUnimplementedTreeGraphServiceServer() {}

// UnsafeTreeGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreeGraphServiceServer will
// result in compilation errors.
type UnsafeTreeGraphServiceServer interface {
	mustEmbedUnimplementedTreeGraphServiceServer()
}

func RegisterTreeGraphServiceServer(s grpc.ServiceRegistrar, srv TreeGraphServiceServer) {
	s.RegisterService(&TreeGraphService_ServiceDesc, srv)
}

func _TreeGraphService_GetTreeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeGraphServiceServer).GetTreeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeGraphService_GetTreeNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeGraphServiceServer).GetTreeNode(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeGraphService_GetChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeGraphServiceServer).GetChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeGraphService_GetChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeGraphServiceServer).GetChildren(ctx, req.(*PgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeGraphService_GetTitleAutoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleAutoCompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeGraphServiceServer).GetTitleAutoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeGraphService_GetTitleAutoComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeGraphServiceServer).GetTitleAutoComplete(ctx, req.(*TitleAutoCompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeGraphService_GetPathBetween_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeGraphServiceServer).GetPathBetween(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeGraphService_GetPathBetween_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeGraphServiceServer).GetPathBetween(ctx, req.(*GetPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeGraphService_GetConst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeGraphServiceServer).GetConst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeGraphService_GetConst_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeGraphServiceServer).GetConst(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TreeGraphService_ServiceDesc is the grpc.ServiceDesc for TreeGraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TreeGraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.graph.v1.TreeGraphService",
	HandlerType: (*TreeGraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTreeNode",
			Handler:    _TreeGraphService_GetTreeNode_Handler,
		},
		{
			MethodName: "GetChildren",
			Handler:    _TreeGraphService_GetChildren_Handler,
		},
		{
			MethodName: "GetTitleAutoComplete",
			Handler:    _TreeGraphService_GetTitleAutoComplete_Handler,
		},
		{
			MethodName: "GetPathTo",
			Handler:    _TreeGraphService_GetPathBetween_Handler,
		},
		{
			MethodName: "GetConst",
			Handler:    _TreeGraphService_GetConst_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/graph/v1/graph_tree.proto",
}
