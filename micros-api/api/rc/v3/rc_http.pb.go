// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.20.3
// source: api/rc/v3/rc.proto

package v3

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRcServiceGetAhpResult = "/api.rc.v3.RcService/GetAhpResult"
const OperationRcServiceGetReportContent = "/api.rc.v3.RcService/GetReportContent"
const OperationRcServiceGetReportDataValidationStats = "/api.rc.v3.RcService/GetReportDataValidationStats"
const OperationRcServiceGetReportDecisionFactor = "/api.rc.v3.RcService/GetReportDecisionFactor"
const OperationRcServiceGetReportPrintConfig = "/api.rc.v3.RcService/GetReportPrintConfig"
const OperationRcServiceGetTradeDetail = "/api.rc.v3.RcService/GetTradeDetail"
const OperationRcServiceInsertReportDecisionFactor = "/api.rc.v3.RcService/InsertReportDecisionFactor"
const OperationRcServiceListCompanies = "/api.rc.v3.RcService/ListCompanies"
const OperationRcServiceListCompaniesWaiting = "/api.rc.v3.RcService/ListCompaniesWaiting"
const OperationRcServiceListReport = "/api.rc.v3.RcService/ListReport"
const OperationRcServiceListReportByUscId = "/api.rc.v3.RcService/ListReportByUscId"
const OperationRcServiceUpdateReportContentSnapshot = "/api.rc.v3.RcService/UpdateReportContentSnapshot"
const OperationRcServiceUpdateReportDecisionFactor = "/api.rc.v3.RcService/UpdateReportDecisionFactor"
const OperationRcServiceUpdateReportPrintConfig = "/api.rc.v3.RcService/UpdateReportPrintConfig"

type RcServiceHTTPServer interface {
	GetAhpResult(context.Context, *GetAhpResultReq) (*GetAhpResultResp, error)
	GetReportContent(context.Context, *GetReportContentReq) (*GetReportContentResp, error)
	GetReportDataValidationStats(context.Context, *GetReportDataValidationStatsReq) (*GetReportDataValidationStatsResp, error)
	GetReportDecisionFactor(context.Context, *GetDecisionFactorReq) (*GetDecisionFactorResp, error)
	GetReportPrintConfig(context.Context, *emptypb.Empty) (*GetReportPrintConfigResp, error)
	GetTradeDetail(context.Context, *GetTradeDetailReq) (*GetTradeDetailResp, error)
	InsertReportDecisionFactor(context.Context, *InsertReportDecisionFactorReq) (*InsertReportDecisionFactorResp, error)
	ListCompanies(context.Context, *ListReportKwdSearchReq) (*ListCompaniesResp, error)
	ListCompaniesWaiting(context.Context, *ListCompanyWaitingReq) (*ListCompaniesWaitingResp, error)
	ListReport(context.Context, *ListReportKwdSearchReq) (*ListReportResp, error)
	ListReportByUscId(context.Context, *ListReportByUscIdReq) (*ListReportByUscIdResp, error)
	UpdateReportContentSnapshot(context.Context, *UpdateReportContentSnapshotReq) (*UpdateReportContentSnapshotResp, error)
	UpdateReportDecisionFactor(context.Context, *UpdateReportDecisionFactorReq) (*InsertReportDecisionFactorResp, error)
	UpdateReportPrintConfig(context.Context, *SaveReportPrintConfigReq) (*SaveReportPrintConfigResp, error)
}

func RegisterRcServiceHTTPServer(s *http.Server, srv RcServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/micros/rc/v3/report/decision-factor", _RcService_InsertReportDecisionFactor0_HTTP_Handler(srv))
	r.POST("/micros/rc/v3/report/decision-factor/update", _RcService_UpdateReportDecisionFactor0_HTTP_Handler(srv))
	r.GET("/micros/rc/v3/report/decision-factor", _RcService_GetReportDecisionFactor0_HTTP_Handler(srv))
	r.GET("/micros/rc/v3/report/list", _RcService_ListReport0_HTTP_Handler(srv))
	r.GET("/micros/rc/v3/report/companies", _RcService_ListCompanies0_HTTP_Handler(srv))
	r.GET("/micros/rc/v3/report/companies/waiting", _RcService_ListCompaniesWaiting0_HTTP_Handler(srv))
	r.GET("/micros/rc/v3/report/companies/list", _RcService_ListReportByUscId0_HTTP_Handler(srv))
	r.GET("/micros/rc/v3/report/content", _RcService_GetReportContent0_HTTP_Handler(srv))
	r.POST("/micros/rc/v3/report/content/snapshot/update", _RcService_UpdateReportContentSnapshot0_HTTP_Handler(srv))
	r.GET("/micros/rc/v3/report/validate", _RcService_GetReportDataValidationStats0_HTTP_Handler(srv))
	r.GET("/micros/rc/v3/report/ahp", _RcService_GetAhpResult0_HTTP_Handler(srv))
	r.GET("/micros/rc/v3/report/trade_detail", _RcService_GetTradeDetail0_HTTP_Handler(srv))
	r.GET("/micros/rc/v3/report/print_config", _RcService_GetReportPrintConfig0_HTTP_Handler(srv))
	r.POST("/micros/rc/v3/report/print_config/update", _RcService_UpdateReportPrintConfig0_HTTP_Handler(srv))
}

func _RcService_InsertReportDecisionFactor0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InsertReportDecisionFactorReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceInsertReportDecisionFactor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertReportDecisionFactor(ctx, req.(*InsertReportDecisionFactorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InsertReportDecisionFactorResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_UpdateReportDecisionFactor0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateReportDecisionFactorReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceUpdateReportDecisionFactor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateReportDecisionFactor(ctx, req.(*UpdateReportDecisionFactorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InsertReportDecisionFactorResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_GetReportDecisionFactor0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDecisionFactorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceGetReportDecisionFactor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReportDecisionFactor(ctx, req.(*GetDecisionFactorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDecisionFactorResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_ListReport0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListReportKwdSearchReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceListReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListReport(ctx, req.(*ListReportKwdSearchReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReportResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_ListCompanies0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListReportKwdSearchReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceListCompanies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCompanies(ctx, req.(*ListReportKwdSearchReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCompaniesResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_ListCompaniesWaiting0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCompanyWaitingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceListCompaniesWaiting)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCompaniesWaiting(ctx, req.(*ListCompanyWaitingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCompaniesWaitingResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_ListReportByUscId0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListReportByUscIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceListReportByUscId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListReportByUscId(ctx, req.(*ListReportByUscIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReportByUscIdResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_GetReportContent0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReportContentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceGetReportContent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReportContent(ctx, req.(*GetReportContentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReportContentResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_UpdateReportContentSnapshot0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateReportContentSnapshotReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceUpdateReportContentSnapshot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateReportContentSnapshot(ctx, req.(*UpdateReportContentSnapshotReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateReportContentSnapshotResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_GetReportDataValidationStats0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReportDataValidationStatsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceGetReportDataValidationStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReportDataValidationStats(ctx, req.(*GetReportDataValidationStatsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReportDataValidationStatsResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_GetAhpResult0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAhpResultReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceGetAhpResult)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAhpResult(ctx, req.(*GetAhpResultReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAhpResultResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_GetTradeDetail0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTradeDetailReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceGetTradeDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTradeDetail(ctx, req.(*GetTradeDetailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTradeDetailResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_GetReportPrintConfig0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceGetReportPrintConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReportPrintConfig(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReportPrintConfigResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_UpdateReportPrintConfig0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveReportPrintConfigReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceUpdateReportPrintConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateReportPrintConfig(ctx, req.(*SaveReportPrintConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveReportPrintConfigResp)
		return ctx.Result(200, reply)
	}
}

type RcServiceHTTPClient interface {
	GetAhpResult(ctx context.Context, req *GetAhpResultReq, opts ...http.CallOption) (rsp *GetAhpResultResp, err error)
	GetReportContent(ctx context.Context, req *GetReportContentReq, opts ...http.CallOption) (rsp *GetReportContentResp, err error)
	GetReportDataValidationStats(ctx context.Context, req *GetReportDataValidationStatsReq, opts ...http.CallOption) (rsp *GetReportDataValidationStatsResp, err error)
	GetReportDecisionFactor(ctx context.Context, req *GetDecisionFactorReq, opts ...http.CallOption) (rsp *GetDecisionFactorResp, err error)
	GetReportPrintConfig(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetReportPrintConfigResp, err error)
	GetTradeDetail(ctx context.Context, req *GetTradeDetailReq, opts ...http.CallOption) (rsp *GetTradeDetailResp, err error)
	InsertReportDecisionFactor(ctx context.Context, req *InsertReportDecisionFactorReq, opts ...http.CallOption) (rsp *InsertReportDecisionFactorResp, err error)
	ListCompanies(ctx context.Context, req *ListReportKwdSearchReq, opts ...http.CallOption) (rsp *ListCompaniesResp, err error)
	ListCompaniesWaiting(ctx context.Context, req *ListCompanyWaitingReq, opts ...http.CallOption) (rsp *ListCompaniesWaitingResp, err error)
	ListReport(ctx context.Context, req *ListReportKwdSearchReq, opts ...http.CallOption) (rsp *ListReportResp, err error)
	ListReportByUscId(ctx context.Context, req *ListReportByUscIdReq, opts ...http.CallOption) (rsp *ListReportByUscIdResp, err error)
	UpdateReportContentSnapshot(ctx context.Context, req *UpdateReportContentSnapshotReq, opts ...http.CallOption) (rsp *UpdateReportContentSnapshotResp, err error)
	UpdateReportDecisionFactor(ctx context.Context, req *UpdateReportDecisionFactorReq, opts ...http.CallOption) (rsp *InsertReportDecisionFactorResp, err error)
	UpdateReportPrintConfig(ctx context.Context, req *SaveReportPrintConfigReq, opts ...http.CallOption) (rsp *SaveReportPrintConfigResp, err error)
}

type RcServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRcServiceHTTPClient(client *http.Client) RcServiceHTTPClient {
	return &RcServiceHTTPClientImpl{client}
}

func (c *RcServiceHTTPClientImpl) GetAhpResult(ctx context.Context, in *GetAhpResultReq, opts ...http.CallOption) (*GetAhpResultResp, error) {
	var out GetAhpResultResp
	pattern := "/micros/rc/v3/report/ahp"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceGetAhpResult))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) GetReportContent(ctx context.Context, in *GetReportContentReq, opts ...http.CallOption) (*GetReportContentResp, error) {
	var out GetReportContentResp
	pattern := "/micros/rc/v3/report/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceGetReportContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) GetReportDataValidationStats(ctx context.Context, in *GetReportDataValidationStatsReq, opts ...http.CallOption) (*GetReportDataValidationStatsResp, error) {
	var out GetReportDataValidationStatsResp
	pattern := "/micros/rc/v3/report/validate"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceGetReportDataValidationStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) GetReportDecisionFactor(ctx context.Context, in *GetDecisionFactorReq, opts ...http.CallOption) (*GetDecisionFactorResp, error) {
	var out GetDecisionFactorResp
	pattern := "/micros/rc/v3/report/decision-factor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceGetReportDecisionFactor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) GetReportPrintConfig(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetReportPrintConfigResp, error) {
	var out GetReportPrintConfigResp
	pattern := "/micros/rc/v3/report/print_config"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceGetReportPrintConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) GetTradeDetail(ctx context.Context, in *GetTradeDetailReq, opts ...http.CallOption) (*GetTradeDetailResp, error) {
	var out GetTradeDetailResp
	pattern := "/micros/rc/v3/report/trade_detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceGetTradeDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) InsertReportDecisionFactor(ctx context.Context, in *InsertReportDecisionFactorReq, opts ...http.CallOption) (*InsertReportDecisionFactorResp, error) {
	var out InsertReportDecisionFactorResp
	pattern := "/micros/rc/v3/report/decision-factor"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRcServiceInsertReportDecisionFactor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) ListCompanies(ctx context.Context, in *ListReportKwdSearchReq, opts ...http.CallOption) (*ListCompaniesResp, error) {
	var out ListCompaniesResp
	pattern := "/micros/rc/v3/report/companies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceListCompanies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) ListCompaniesWaiting(ctx context.Context, in *ListCompanyWaitingReq, opts ...http.CallOption) (*ListCompaniesWaitingResp, error) {
	var out ListCompaniesWaitingResp
	pattern := "/micros/rc/v3/report/companies/waiting"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceListCompaniesWaiting))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) ListReport(ctx context.Context, in *ListReportKwdSearchReq, opts ...http.CallOption) (*ListReportResp, error) {
	var out ListReportResp
	pattern := "/micros/rc/v3/report/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceListReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) ListReportByUscId(ctx context.Context, in *ListReportByUscIdReq, opts ...http.CallOption) (*ListReportByUscIdResp, error) {
	var out ListReportByUscIdResp
	pattern := "/micros/rc/v3/report/companies/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceListReportByUscId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) UpdateReportContentSnapshot(ctx context.Context, in *UpdateReportContentSnapshotReq, opts ...http.CallOption) (*UpdateReportContentSnapshotResp, error) {
	var out UpdateReportContentSnapshotResp
	pattern := "/micros/rc/v3/report/content/snapshot/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRcServiceUpdateReportContentSnapshot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) UpdateReportDecisionFactor(ctx context.Context, in *UpdateReportDecisionFactorReq, opts ...http.CallOption) (*InsertReportDecisionFactorResp, error) {
	var out InsertReportDecisionFactorResp
	pattern := "/micros/rc/v3/report/decision-factor/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRcServiceUpdateReportDecisionFactor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) UpdateReportPrintConfig(ctx context.Context, in *SaveReportPrintConfigReq, opts ...http.CallOption) (*SaveReportPrintConfigResp, error) {
	var out SaveReportPrintConfigResp
	pattern := "/micros/rc/v3/report/print_config/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRcServiceUpdateReportPrintConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
