// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: api/rc/v3/rc.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RcService_InsertReportDecisionFactor_FullMethodName   = "/api.rc.v3.RcService/InsertReportDecisionFactor"
	RcService_UpdateReportDecisionFactor_FullMethodName   = "/api.rc.v3.RcService/UpdateReportDecisionFactor"
	RcService_GetReportDecisionFactor_FullMethodName      = "/api.rc.v3.RcService/GetReportDecisionFactor"
	RcService_ListReport_FullMethodName                   = "/api.rc.v3.RcService/ListReport"
	RcService_ListCompanies_FullMethodName                = "/api.rc.v3.RcService/ListCompanies"
	RcService_ListCompaniesWaiting_FullMethodName         = "/api.rc.v3.RcService/ListCompaniesWaiting"
	RcService_ListReportByUscId_FullMethodName            = "/api.rc.v3.RcService/ListReportByUscId"
	RcService_GetReportContent_FullMethodName             = "/api.rc.v3.RcService/GetReportContent"
	RcService_UpdateReportContentSnapshot_FullMethodName  = "/api.rc.v3.RcService/UpdateReportContentSnapshot"
	RcService_GetReportDataValidationStats_FullMethodName = "/api.rc.v3.RcService/GetReportDataValidationStats"
	RcService_GetAhpResult_FullMethodName                 = "/api.rc.v3.RcService/GetAhpResult"
	RcService_GetTradeDetail_FullMethodName               = "/api.rc.v3.RcService/GetTradeDetail"
	RcService_GetReportPrintConfig_FullMethodName         = "/api.rc.v3.RcService/GetReportPrintConfig"
	RcService_UpdateReportPrintConfig_FullMethodName      = "/api.rc.v3.RcService/UpdateReportPrintConfig"
)

// RcServiceClient is the client API for RcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RcServiceClient interface {
	InsertReportDecisionFactor(ctx context.Context, in *InsertReportDecisionFactorReq, opts ...grpc.CallOption) (*InsertReportDecisionFactorResp, error)
	UpdateReportDecisionFactor(ctx context.Context, in *UpdateReportDecisionFactorReq, opts ...grpc.CallOption) (*InsertReportDecisionFactorResp, error)
	GetReportDecisionFactor(ctx context.Context, in *GetDecisionFactorReq, opts ...grpc.CallOption) (*GetDecisionFactorResp, error)
	ListReport(ctx context.Context, in *ListReportKwdSearchReq, opts ...grpc.CallOption) (*ListReportResp, error)
	ListCompanies(ctx context.Context, in *ListReportKwdSearchReq, opts ...grpc.CallOption) (*ListCompaniesResp, error)
	ListCompaniesWaiting(ctx context.Context, in *ListCompanyWaitingReq, opts ...grpc.CallOption) (*ListCompaniesWaitingResp, error)
	ListReportByUscId(ctx context.Context, in *ListReportByUscIdReq, opts ...grpc.CallOption) (*ListReportByUscIdResp, error)
	GetReportContent(ctx context.Context, in *GetReportContentReq, opts ...grpc.CallOption) (*GetReportContentResp, error)
	UpdateReportContentSnapshot(ctx context.Context, in *UpdateReportContentSnapshotReq, opts ...grpc.CallOption) (*UpdateReportContentSnapshotResp, error)
	GetReportDataValidationStats(ctx context.Context, in *GetReportDataValidationStatsReq, opts ...grpc.CallOption) (*GetReportDataValidationStatsResp, error)
	GetAhpResult(ctx context.Context, in *GetAhpResultReq, opts ...grpc.CallOption) (*GetAhpResultResp, error)
	GetTradeDetail(ctx context.Context, in *GetTradeDetailReq, opts ...grpc.CallOption) (*GetTradeDetailResp, error)
	GetReportPrintConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetReportPrintConfigResp, error)
	UpdateReportPrintConfig(ctx context.Context, in *SaveReportPrintConfigReq, opts ...grpc.CallOption) (*SaveReportPrintConfigResp, error)
}

type rcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRcServiceClient(cc grpc.ClientConnInterface) RcServiceClient {
	return &rcServiceClient{cc}
}

func (c *rcServiceClient) InsertReportDecisionFactor(ctx context.Context, in *InsertReportDecisionFactorReq, opts ...grpc.CallOption) (*InsertReportDecisionFactorResp, error) {
	out := new(InsertReportDecisionFactorResp)
	err := c.cc.Invoke(ctx, RcService_InsertReportDecisionFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) UpdateReportDecisionFactor(ctx context.Context, in *UpdateReportDecisionFactorReq, opts ...grpc.CallOption) (*InsertReportDecisionFactorResp, error) {
	out := new(InsertReportDecisionFactorResp)
	err := c.cc.Invoke(ctx, RcService_UpdateReportDecisionFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) GetReportDecisionFactor(ctx context.Context, in *GetDecisionFactorReq, opts ...grpc.CallOption) (*GetDecisionFactorResp, error) {
	out := new(GetDecisionFactorResp)
	err := c.cc.Invoke(ctx, RcService_GetReportDecisionFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) ListReport(ctx context.Context, in *ListReportKwdSearchReq, opts ...grpc.CallOption) (*ListReportResp, error) {
	out := new(ListReportResp)
	err := c.cc.Invoke(ctx, RcService_ListReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) ListCompanies(ctx context.Context, in *ListReportKwdSearchReq, opts ...grpc.CallOption) (*ListCompaniesResp, error) {
	out := new(ListCompaniesResp)
	err := c.cc.Invoke(ctx, RcService_ListCompanies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) ListCompaniesWaiting(ctx context.Context, in *ListCompanyWaitingReq, opts ...grpc.CallOption) (*ListCompaniesWaitingResp, error) {
	out := new(ListCompaniesWaitingResp)
	err := c.cc.Invoke(ctx, RcService_ListCompaniesWaiting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) ListReportByUscId(ctx context.Context, in *ListReportByUscIdReq, opts ...grpc.CallOption) (*ListReportByUscIdResp, error) {
	out := new(ListReportByUscIdResp)
	err := c.cc.Invoke(ctx, RcService_ListReportByUscId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) GetReportContent(ctx context.Context, in *GetReportContentReq, opts ...grpc.CallOption) (*GetReportContentResp, error) {
	out := new(GetReportContentResp)
	err := c.cc.Invoke(ctx, RcService_GetReportContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) UpdateReportContentSnapshot(ctx context.Context, in *UpdateReportContentSnapshotReq, opts ...grpc.CallOption) (*UpdateReportContentSnapshotResp, error) {
	out := new(UpdateReportContentSnapshotResp)
	err := c.cc.Invoke(ctx, RcService_UpdateReportContentSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) GetReportDataValidationStats(ctx context.Context, in *GetReportDataValidationStatsReq, opts ...grpc.CallOption) (*GetReportDataValidationStatsResp, error) {
	out := new(GetReportDataValidationStatsResp)
	err := c.cc.Invoke(ctx, RcService_GetReportDataValidationStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) GetAhpResult(ctx context.Context, in *GetAhpResultReq, opts ...grpc.CallOption) (*GetAhpResultResp, error) {
	out := new(GetAhpResultResp)
	err := c.cc.Invoke(ctx, RcService_GetAhpResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) GetTradeDetail(ctx context.Context, in *GetTradeDetailReq, opts ...grpc.CallOption) (*GetTradeDetailResp, error) {
	out := new(GetTradeDetailResp)
	err := c.cc.Invoke(ctx, RcService_GetTradeDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) GetReportPrintConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetReportPrintConfigResp, error) {
	out := new(GetReportPrintConfigResp)
	err := c.cc.Invoke(ctx, RcService_GetReportPrintConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) UpdateReportPrintConfig(ctx context.Context, in *SaveReportPrintConfigReq, opts ...grpc.CallOption) (*SaveReportPrintConfigResp, error) {
	out := new(SaveReportPrintConfigResp)
	err := c.cc.Invoke(ctx, RcService_UpdateReportPrintConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RcServiceServer is the server API for RcService service.
// All implementations must embed UnimplementedRcServiceServer
// for forward compatibility
type RcServiceServer interface {
	InsertReportDecisionFactor(context.Context, *InsertReportDecisionFactorReq) (*InsertReportDecisionFactorResp, error)
	UpdateReportDecisionFactor(context.Context, *UpdateReportDecisionFactorReq) (*InsertReportDecisionFactorResp, error)
	GetReportDecisionFactor(context.Context, *GetDecisionFactorReq) (*GetDecisionFactorResp, error)
	ListReport(context.Context, *ListReportKwdSearchReq) (*ListReportResp, error)
	ListCompanies(context.Context, *ListReportKwdSearchReq) (*ListCompaniesResp, error)
	ListCompaniesWaiting(context.Context, *ListCompanyWaitingReq) (*ListCompaniesWaitingResp, error)
	ListReportByUscId(context.Context, *ListReportByUscIdReq) (*ListReportByUscIdResp, error)
	GetReportContent(context.Context, *GetReportContentReq) (*GetReportContentResp, error)
	UpdateReportContentSnapshot(context.Context, *UpdateReportContentSnapshotReq) (*UpdateReportContentSnapshotResp, error)
	GetReportDataValidationStats(context.Context, *GetReportDataValidationStatsReq) (*GetReportDataValidationStatsResp, error)
	GetAhpResult(context.Context, *GetAhpResultReq) (*GetAhpResultResp, error)
	GetTradeDetail(context.Context, *GetTradeDetailReq) (*GetTradeDetailResp, error)
	GetReportPrintConfig(context.Context, *emptypb.Empty) (*GetReportPrintConfigResp, error)
	UpdateReportPrintConfig(context.Context, *SaveReportPrintConfigReq) (*SaveReportPrintConfigResp, error)
	mustEmbedUnimplementedRcServiceServer()
}

// UnimplementedRcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRcServiceServer struct {
}

func (UnimplementedRcServiceServer) InsertReportDecisionFactor(context.Context, *InsertReportDecisionFactorReq) (*InsertReportDecisionFactorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertReportDecisionFactor not implemented")
}
func (UnimplementedRcServiceServer) UpdateReportDecisionFactor(context.Context, *UpdateReportDecisionFactorReq) (*InsertReportDecisionFactorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportDecisionFactor not implemented")
}
func (UnimplementedRcServiceServer) GetReportDecisionFactor(context.Context, *GetDecisionFactorReq) (*GetDecisionFactorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportDecisionFactor not implemented")
}
func (UnimplementedRcServiceServer) ListReport(context.Context, *ListReportKwdSearchReq) (*ListReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReport not implemented")
}
func (UnimplementedRcServiceServer) ListCompanies(context.Context, *ListReportKwdSearchReq) (*ListCompaniesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanies not implemented")
}
func (UnimplementedRcServiceServer) ListCompaniesWaiting(context.Context, *ListCompanyWaitingReq) (*ListCompaniesWaitingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompaniesWaiting not implemented")
}
func (UnimplementedRcServiceServer) ListReportByUscId(context.Context, *ListReportByUscIdReq) (*ListReportByUscIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportByUscId not implemented")
}
func (UnimplementedRcServiceServer) GetReportContent(context.Context, *GetReportContentReq) (*GetReportContentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportContent not implemented")
}
func (UnimplementedRcServiceServer) UpdateReportContentSnapshot(context.Context, *UpdateReportContentSnapshotReq) (*UpdateReportContentSnapshotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportContentSnapshot not implemented")
}
func (UnimplementedRcServiceServer) GetReportDataValidationStats(context.Context, *GetReportDataValidationStatsReq) (*GetReportDataValidationStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportDataValidationStats not implemented")
}
func (UnimplementedRcServiceServer) GetAhpResult(context.Context, *GetAhpResultReq) (*GetAhpResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAhpResult not implemented")
}
func (UnimplementedRcServiceServer) GetTradeDetail(context.Context, *GetTradeDetailReq) (*GetTradeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeDetail not implemented")
}
func (UnimplementedRcServiceServer) GetReportPrintConfig(context.Context, *emptypb.Empty) (*GetReportPrintConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportPrintConfig not implemented")
}
func (UnimplementedRcServiceServer) UpdateReportPrintConfig(context.Context, *SaveReportPrintConfigReq) (*SaveReportPrintConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportPrintConfig not implemented")
}
func (UnimplementedRcServiceServer) mustEmbedUnimplementedRcServiceServer() {}

// UnsafeRcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RcServiceServer will
// result in compilation errors.
type UnsafeRcServiceServer interface {
	mustEmbedUnimplementedRcServiceServer()
}

func RegisterRcServiceServer(s grpc.ServiceRegistrar, srv RcServiceServer) {
	s.RegisterService(&RcService_ServiceDesc, srv)
}

func _RcService_InsertReportDecisionFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertReportDecisionFactorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).InsertReportDecisionFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_InsertReportDecisionFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).InsertReportDecisionFactor(ctx, req.(*InsertReportDecisionFactorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_UpdateReportDecisionFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportDecisionFactorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).UpdateReportDecisionFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_UpdateReportDecisionFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).UpdateReportDecisionFactor(ctx, req.(*UpdateReportDecisionFactorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_GetReportDecisionFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecisionFactorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).GetReportDecisionFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_GetReportDecisionFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).GetReportDecisionFactor(ctx, req.(*GetDecisionFactorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_ListReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportKwdSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).ListReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_ListReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).ListReport(ctx, req.(*ListReportKwdSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportKwdSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_ListCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).ListCompanies(ctx, req.(*ListReportKwdSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_ListCompaniesWaiting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyWaitingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).ListCompaniesWaiting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_ListCompaniesWaiting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).ListCompaniesWaiting(ctx, req.(*ListCompanyWaitingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_ListReportByUscId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportByUscIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).ListReportByUscId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_ListReportByUscId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).ListReportByUscId(ctx, req.(*ListReportByUscIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_GetReportContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).GetReportContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_GetReportContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).GetReportContent(ctx, req.(*GetReportContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_UpdateReportContentSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportContentSnapshotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).UpdateReportContentSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_UpdateReportContentSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).UpdateReportContentSnapshot(ctx, req.(*UpdateReportContentSnapshotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_GetReportDataValidationStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportDataValidationStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).GetReportDataValidationStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_GetReportDataValidationStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).GetReportDataValidationStats(ctx, req.(*GetReportDataValidationStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_GetAhpResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAhpResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).GetAhpResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_GetAhpResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).GetAhpResult(ctx, req.(*GetAhpResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_GetTradeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).GetTradeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_GetTradeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).GetTradeDetail(ctx, req.(*GetTradeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_GetReportPrintConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).GetReportPrintConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_GetReportPrintConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).GetReportPrintConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_UpdateReportPrintConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveReportPrintConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).UpdateReportPrintConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_UpdateReportPrintConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).UpdateReportPrintConfig(ctx, req.(*SaveReportPrintConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RcService_ServiceDesc is the grpc.ServiceDesc for RcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rc.v3.RcService",
	HandlerType: (*RcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertReportDecisionFactor",
			Handler:    _RcService_InsertReportDecisionFactor_Handler,
		},
		{
			MethodName: "UpdateReportDecisionFactor",
			Handler:    _RcService_UpdateReportDecisionFactor_Handler,
		},
		{
			MethodName: "GetReportDecisionFactor",
			Handler:    _RcService_GetReportDecisionFactor_Handler,
		},
		{
			MethodName: "ListReport",
			Handler:    _RcService_ListReport_Handler,
		},
		{
			MethodName: "ListCompanies",
			Handler:    _RcService_ListCompanies_Handler,
		},
		{
			MethodName: "ListCompaniesWaiting",
			Handler:    _RcService_ListCompaniesWaiting_Handler,
		},
		{
			MethodName: "ListReportByUscId",
			Handler:    _RcService_ListReportByUscId_Handler,
		},
		{
			MethodName: "GetReportContent",
			Handler:    _RcService_GetReportContent_Handler,
		},
		{
			MethodName: "UpdateReportContentSnapshot",
			Handler:    _RcService_UpdateReportContentSnapshot_Handler,
		},
		{
			MethodName: "GetReportDataValidationStats",
			Handler:    _RcService_GetReportDataValidationStats_Handler,
		},
		{
			MethodName: "GetAhpResult",
			Handler:    _RcService_GetAhpResult_Handler,
		},
		{
			MethodName: "GetTradeDetail",
			Handler:    _RcService_GetTradeDetail_Handler,
		},
		{
			MethodName: "GetReportPrintConfig",
			Handler:    _RcService_GetReportPrintConfig_Handler,
		},
		{
			MethodName: "UpdateReportPrintConfig",
			Handler:    _RcService_UpdateReportPrintConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rc/v3/rc.proto",
}
