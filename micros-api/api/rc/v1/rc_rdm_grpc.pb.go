// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/rc/v1/rc_rdm.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RcRdmService_GetAhpResult_FullMethodName = "/api.rc.v1.RcRdmService/GetAhpResult"
)

// RcRdmServiceClient is the client API for RcRdmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RcRdmServiceClient interface {
	GetAhpResult(ctx context.Context, in *GetAhpResultDetailReq, opts ...grpc.CallOption) (*AhpResultResp, error)
}

type rcRdmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRcRdmServiceClient(cc grpc.ClientConnInterface) RcRdmServiceClient {
	return &rcRdmServiceClient{cc}
}

func (c *rcRdmServiceClient) GetAhpResult(ctx context.Context, in *GetAhpResultDetailReq, opts ...grpc.CallOption) (*AhpResultResp, error) {
	out := new(AhpResultResp)
	err := c.cc.Invoke(ctx, RcRdmService_GetAhpResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RcRdmServiceServer is the server API for RcRdmService service.
// All implementations must embed UnimplementedRcRdmServiceServer
// for forward compatibility
type RcRdmServiceServer interface {
	GetAhpResult(context.Context, *GetAhpResultDetailReq) (*AhpResultResp, error)
	mustEmbedUnimplementedRcRdmServiceServer()
}

// UnimplementedRcRdmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRcRdmServiceServer struct {
}

func (UnimplementedRcRdmServiceServer) GetAhpResult(context.Context, *GetAhpResultDetailReq) (*AhpResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAhpResult not implemented")
}
func (UnimplementedRcRdmServiceServer) mustEmbedUnimplementedRcRdmServiceServer() {}

// UnsafeRcRdmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RcRdmServiceServer will
// result in compilation errors.
type UnsafeRcRdmServiceServer interface {
	mustEmbedUnimplementedRcRdmServiceServer()
}

func RegisterRcRdmServiceServer(s grpc.ServiceRegistrar, srv RcRdmServiceServer) {
	s.RegisterService(&RcRdmService_ServiceDesc, srv)
}

func _RcRdmService_GetAhpResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAhpResultDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcRdmServiceServer).GetAhpResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcRdmService_GetAhpResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcRdmServiceServer).GetAhpResult(ctx, req.(*GetAhpResultDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RcRdmService_ServiceDesc is the grpc.ServiceDesc for RcRdmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RcRdmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rc.v1.RcRdmService",
	HandlerType: (*RcRdmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAhpResult",
			Handler:    _RcRdmService_GetAhpResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rc/v1/rc_rdm.proto",
}
