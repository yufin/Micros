// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.20.3
// source: api/rc/v1/rc_rdm.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRcRdmServiceGetAhpResult = "/api.rc.v1.RcRdmService/GetAhpResult"

type RcRdmServiceHTTPServer interface {
	GetAhpResult(context.Context, *GetAhpResultDetailReq) (*AhpResultResp, error)
}

func RegisterRcRdmServiceHTTPServer(s *http.Server, srv RcRdmServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/micros/rc/v1/ahp/res/detail", _RcRdmService_GetAhpResult0_HTTP_Handler(srv))
}

func _RcRdmService_GetAhpResult0_HTTP_Handler(srv RcRdmServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAhpResultDetailReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcRdmServiceGetAhpResult)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAhpResult(ctx, req.(*GetAhpResultDetailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AhpResultResp)
		return ctx.Result(200, reply)
	}
}

type RcRdmServiceHTTPClient interface {
	GetAhpResult(ctx context.Context, req *GetAhpResultDetailReq, opts ...http.CallOption) (rsp *AhpResultResp, err error)
}

type RcRdmServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRcRdmServiceHTTPClient(client *http.Client) RcRdmServiceHTTPClient {
	return &RcRdmServiceHTTPClientImpl{client}
}

func (c *RcRdmServiceHTTPClientImpl) GetAhpResult(ctx context.Context, in *GetAhpResultDetailReq, opts ...http.CallOption) (*AhpResultResp, error) {
	var out AhpResultResp
	pattern := "/micros/rc/v1/ahp/res/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcRdmServiceGetAhpResult))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
