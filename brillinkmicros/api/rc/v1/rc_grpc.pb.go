// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/rc/v1/rc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RcService_ListReportInfos_FullMethodName            = "/api.rc.v1.RcService/ListReportInfos"
	RcService_GetReportContent_FullMethodName           = "/api.rc.v1.RcService/GetReportContent"
	RcService_RefreshReportContent_FullMethodName       = "/api.rc.v1.RcService/RefreshReportContent"
	RcService_SetReportDependencyData_FullMethodName    = "/api.rc.v1.RcService/SetReportDependencyData"
	RcService_UpdateReportDependencyData_FullMethodName = "/api.rc.v1.RcService/UpdateReportDependencyData"
	RcService_GetReportDependencyData_FullMethodName    = "/api.rc.v1.RcService/GetReportDependencyData"
)

// RcServiceClient is the client API for RcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RcServiceClient interface {
	ListReportInfos(ctx context.Context, in *PaginationReq, opts ...grpc.CallOption) (*ReportInfosResp, error)
	GetReportContent(ctx context.Context, in *ReportContentReq, opts ...grpc.CallOption) (*ReportContentResp, error)
	RefreshReportContent(ctx context.Context, in *ReportContentReq, opts ...grpc.CallOption) (*ReportContentResp, error)
	SetReportDependencyData(ctx context.Context, in *SetDependencyDataReq, opts ...grpc.CallOption) (*SetDependencyDataResp, error)
	UpdateReportDependencyData(ctx context.Context, in *SetDependencyDataReq, opts ...grpc.CallOption) (*SetDependencyDataResp, error)
	GetReportDependencyData(ctx context.Context, in *GetDependencyDataReq, opts ...grpc.CallOption) (*GetDependencyDataResp, error)
}

type rcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRcServiceClient(cc grpc.ClientConnInterface) RcServiceClient {
	return &rcServiceClient{cc}
}

func (c *rcServiceClient) ListReportInfos(ctx context.Context, in *PaginationReq, opts ...grpc.CallOption) (*ReportInfosResp, error) {
	out := new(ReportInfosResp)
	err := c.cc.Invoke(ctx, RcService_ListReportInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) GetReportContent(ctx context.Context, in *ReportContentReq, opts ...grpc.CallOption) (*ReportContentResp, error) {
	out := new(ReportContentResp)
	err := c.cc.Invoke(ctx, RcService_GetReportContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) RefreshReportContent(ctx context.Context, in *ReportContentReq, opts ...grpc.CallOption) (*ReportContentResp, error) {
	out := new(ReportContentResp)
	err := c.cc.Invoke(ctx, RcService_RefreshReportContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) SetReportDependencyData(ctx context.Context, in *SetDependencyDataReq, opts ...grpc.CallOption) (*SetDependencyDataResp, error) {
	out := new(SetDependencyDataResp)
	err := c.cc.Invoke(ctx, RcService_SetReportDependencyData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) UpdateReportDependencyData(ctx context.Context, in *SetDependencyDataReq, opts ...grpc.CallOption) (*SetDependencyDataResp, error) {
	out := new(SetDependencyDataResp)
	err := c.cc.Invoke(ctx, RcService_UpdateReportDependencyData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcServiceClient) GetReportDependencyData(ctx context.Context, in *GetDependencyDataReq, opts ...grpc.CallOption) (*GetDependencyDataResp, error) {
	out := new(GetDependencyDataResp)
	err := c.cc.Invoke(ctx, RcService_GetReportDependencyData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RcServiceServer is the server API for RcService service.
// All implementations must embed UnimplementedRcServiceServer
// for forward compatibility
type RcServiceServer interface {
	ListReportInfos(context.Context, *PaginationReq) (*ReportInfosResp, error)
	GetReportContent(context.Context, *ReportContentReq) (*ReportContentResp, error)
	RefreshReportContent(context.Context, *ReportContentReq) (*ReportContentResp, error)
	SetReportDependencyData(context.Context, *SetDependencyDataReq) (*SetDependencyDataResp, error)
	UpdateReportDependencyData(context.Context, *SetDependencyDataReq) (*SetDependencyDataResp, error)
	GetReportDependencyData(context.Context, *GetDependencyDataReq) (*GetDependencyDataResp, error)
	mustEmbedUnimplementedRcServiceServer()
}

// UnimplementedRcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRcServiceServer struct {
}

func (UnimplementedRcServiceServer) ListReportInfos(context.Context, *PaginationReq) (*ReportInfosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportInfos not implemented")
}
func (UnimplementedRcServiceServer) GetReportContent(context.Context, *ReportContentReq) (*ReportContentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportContent not implemented")
}
func (UnimplementedRcServiceServer) RefreshReportContent(context.Context, *ReportContentReq) (*ReportContentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshReportContent not implemented")
}
func (UnimplementedRcServiceServer) SetReportDependencyData(context.Context, *SetDependencyDataReq) (*SetDependencyDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReportDependencyData not implemented")
}
func (UnimplementedRcServiceServer) UpdateReportDependencyData(context.Context, *SetDependencyDataReq) (*SetDependencyDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportDependencyData not implemented")
}
func (UnimplementedRcServiceServer) GetReportDependencyData(context.Context, *GetDependencyDataReq) (*GetDependencyDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportDependencyData not implemented")
}
func (UnimplementedRcServiceServer) mustEmbedUnimplementedRcServiceServer() {}

// UnsafeRcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RcServiceServer will
// result in compilation errors.
type UnsafeRcServiceServer interface {
	mustEmbedUnimplementedRcServiceServer()
}

func RegisterRcServiceServer(s grpc.ServiceRegistrar, srv RcServiceServer) {
	s.RegisterService(&RcService_ServiceDesc, srv)
}

func _RcService_ListReportInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).ListReportInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_ListReportInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).ListReportInfos(ctx, req.(*PaginationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_GetReportContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).GetReportContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_GetReportContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).GetReportContent(ctx, req.(*ReportContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_RefreshReportContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).RefreshReportContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_RefreshReportContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).RefreshReportContent(ctx, req.(*ReportContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_SetReportDependencyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDependencyDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).SetReportDependencyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_SetReportDependencyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).SetReportDependencyData(ctx, req.(*SetDependencyDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_UpdateReportDependencyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDependencyDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).UpdateReportDependencyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_UpdateReportDependencyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).UpdateReportDependencyData(ctx, req.(*SetDependencyDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RcService_GetReportDependencyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDependencyDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServiceServer).GetReportDependencyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RcService_GetReportDependencyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServiceServer).GetReportDependencyData(ctx, req.(*GetDependencyDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RcService_ServiceDesc is the grpc.ServiceDesc for RcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rc.v1.RcService",
	HandlerType: (*RcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReportInfos",
			Handler:    _RcService_ListReportInfos_Handler,
		},
		{
			MethodName: "GetReportContent",
			Handler:    _RcService_GetReportContent_Handler,
		},
		{
			MethodName: "RefreshReportContent",
			Handler:    _RcService_RefreshReportContent_Handler,
		},
		{
			MethodName: "SetReportDependencyData",
			Handler:    _RcService_SetReportDependencyData_Handler,
		},
		{
			MethodName: "UpdateReportDependencyData",
			Handler:    _RcService_UpdateReportDependencyData_Handler,
		},
		{
			MethodName: "GetReportDependencyData",
			Handler:    _RcService_GetReportDependencyData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rc/v1/rc.proto",
}
