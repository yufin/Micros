// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v3.21.12
// source: api/rc/v1/rc.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRcServiceGetReportContent = "/api.rc.v1.RcService/GetReportContent"
const OperationRcServiceGetReportDependencyData = "/api.rc.v1.RcService/GetReportDependencyData"
const OperationRcServiceInsertReportDependencyData = "/api.rc.v1.RcService/InsertReportDependencyData"
const OperationRcServiceListReportInfos = "/api.rc.v1.RcService/ListReportInfos"
const OperationRcServiceRefreshReportContent = "/api.rc.v1.RcService/RefreshReportContent"
const OperationRcServiceUpdateReportDependencyData = "/api.rc.v1.RcService/UpdateReportDependencyData"

type RcServiceHTTPServer interface {
	GetReportContent(context.Context, *ReportContentReq) (*ReportContentResp, error)
	GetReportDependencyData(context.Context, *GetDependencyDataReq) (*GetDependencyDataResp, error)
	InsertReportDependencyData(context.Context, *InsertDependencyDataReq) (*SetDependencyDataResp, error)
	ListReportInfos(context.Context, *PaginationReq) (*ReportInfosResp, error)
	RefreshReportContent(context.Context, *RefreshReportContentReq) (*RefreshReportContentResp, error)
	UpdateReportDependencyData(context.Context, *UpdateDependencyDataReq) (*SetDependencyDataResp, error)
}

func RegisterRcServiceHTTPServer(s *http.Server, srv RcServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/micros/rc/v1/report/infos", _RcService_ListReportInfos0_HTTP_Handler(srv))
	r.GET("/micros/rc/v1/report/content", _RcService_GetReportContent0_HTTP_Handler(srv))
	r.PUT("/micros/rc/v1/report/content/refresh", _RcService_RefreshReportContent0_HTTP_Handler(srv))
	r.POST("/micros/rc/v1/report/dependency-data", _RcService_InsertReportDependencyData0_HTTP_Handler(srv))
	r.PUT("/micros/rc/v1/report/dependency-data", _RcService_UpdateReportDependencyData0_HTTP_Handler(srv))
	r.GET("/micros/rc/v1/report/dependency-data", _RcService_GetReportDependencyData0_HTTP_Handler(srv))
}

func _RcService_ListReportInfos0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PaginationReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceListReportInfos)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListReportInfos(ctx, req.(*PaginationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReportInfosResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_GetReportContent0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportContentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceGetReportContent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReportContent(ctx, req.(*ReportContentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReportContentResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_RefreshReportContent0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefreshReportContentReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceRefreshReportContent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshReportContent(ctx, req.(*RefreshReportContentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RefreshReportContentResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_InsertReportDependencyData0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InsertDependencyDataReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceInsertReportDependencyData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertReportDependencyData(ctx, req.(*InsertDependencyDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetDependencyDataResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_UpdateReportDependencyData0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDependencyDataReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceUpdateReportDependencyData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateReportDependencyData(ctx, req.(*UpdateDependencyDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetDependencyDataResp)
		return ctx.Result(200, reply)
	}
}

func _RcService_GetReportDependencyData0_HTTP_Handler(srv RcServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDependencyDataReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRcServiceGetReportDependencyData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReportDependencyData(ctx, req.(*GetDependencyDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDependencyDataResp)
		return ctx.Result(200, reply)
	}
}

type RcServiceHTTPClient interface {
	GetReportContent(ctx context.Context, req *ReportContentReq, opts ...http.CallOption) (rsp *ReportContentResp, err error)
	GetReportDependencyData(ctx context.Context, req *GetDependencyDataReq, opts ...http.CallOption) (rsp *GetDependencyDataResp, err error)
	InsertReportDependencyData(ctx context.Context, req *InsertDependencyDataReq, opts ...http.CallOption) (rsp *SetDependencyDataResp, err error)
	ListReportInfos(ctx context.Context, req *PaginationReq, opts ...http.CallOption) (rsp *ReportInfosResp, err error)
	RefreshReportContent(ctx context.Context, req *RefreshReportContentReq, opts ...http.CallOption) (rsp *RefreshReportContentResp, err error)
	UpdateReportDependencyData(ctx context.Context, req *UpdateDependencyDataReq, opts ...http.CallOption) (rsp *SetDependencyDataResp, err error)
}

type RcServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRcServiceHTTPClient(client *http.Client) RcServiceHTTPClient {
	return &RcServiceHTTPClientImpl{client}
}

func (c *RcServiceHTTPClientImpl) GetReportContent(ctx context.Context, in *ReportContentReq, opts ...http.CallOption) (*ReportContentResp, error) {
	var out ReportContentResp
	pattern := "/micros/rc/v1/report/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceGetReportContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) GetReportDependencyData(ctx context.Context, in *GetDependencyDataReq, opts ...http.CallOption) (*GetDependencyDataResp, error) {
	var out GetDependencyDataResp
	pattern := "/micros/rc/v1/report/dependency-data"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceGetReportDependencyData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) InsertReportDependencyData(ctx context.Context, in *InsertDependencyDataReq, opts ...http.CallOption) (*SetDependencyDataResp, error) {
	var out SetDependencyDataResp
	pattern := "/micros/rc/v1/report/dependency-data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRcServiceInsertReportDependencyData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) ListReportInfos(ctx context.Context, in *PaginationReq, opts ...http.CallOption) (*ReportInfosResp, error) {
	var out ReportInfosResp
	pattern := "/micros/rc/v1/report/infos"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRcServiceListReportInfos))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) RefreshReportContent(ctx context.Context, in *RefreshReportContentReq, opts ...http.CallOption) (*RefreshReportContentResp, error) {
	var out RefreshReportContentResp
	pattern := "/micros/rc/v1/report/content/refresh"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRcServiceRefreshReportContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RcServiceHTTPClientImpl) UpdateReportDependencyData(ctx context.Context, in *UpdateDependencyDataReq, opts ...http.CallOption) (*SetDependencyDataResp, error) {
	var out SetDependencyDataResp
	pattern := "/micros/rc/v1/report/dependency-data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRcServiceUpdateReportDependencyData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
