// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.21.12
// source: api/graph/v1/graph_net.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNetGraphServiceGetChildren = "/api.graph.v1.NetGraphService/GetChildren"
const OperationNetGraphServiceGetNetExpand = "/api.graph.v1.NetGraphService/GetNetExpand"
const OperationNetGraphServiceGetNode = "/api.graph.v1.NetGraphService/GetNode"
const OperationNetGraphServiceGetParents = "/api.graph.v1.NetGraphService/GetParents"

type NetGraphServiceHTTPServer interface {
	GetChildren(context.Context, *PgIdReq) (*NetPaginationResp, error)
	GetNetExpand(context.Context, *NetExpandReq) (*NetResp, error)
	GetNode(context.Context, *PgIdReq) (*NodeResp, error)
	GetParents(context.Context, *PgIdReq) (*NetPaginationResp, error)
}

func RegisterNetGraphServiceHTTPServer(s *http.Server, srv NetGraphServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/micros/graph/v1/net/expand", _NetGraphService_GetNetExpand0_HTTP_Handler(srv))
	r.GET("/micros/graph/v1/net/node", _NetGraphService_GetNode0_HTTP_Handler(srv))
	r.GET("/micros/graph/v1/net/children", _NetGraphService_GetChildren0_HTTP_Handler(srv))
	r.GET("/micros/graph/v1/net/parents", _NetGraphService_GetParents0_HTTP_Handler(srv))
}

func _NetGraphService_GetNetExpand0_HTTP_Handler(srv NetGraphServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NetExpandReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetGraphServiceGetNetExpand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNetExpand(ctx, req.(*NetExpandReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NetResp)
		return ctx.Result(200, reply)
	}
}

func _NetGraphService_GetNode0_HTTP_Handler(srv NetGraphServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PgIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetGraphServiceGetNode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNode(ctx, req.(*PgIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NodeResp)
		return ctx.Result(200, reply)
	}
}

func _NetGraphService_GetChildren0_HTTP_Handler(srv NetGraphServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PgIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetGraphServiceGetChildren)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChildren(ctx, req.(*PgIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NetPaginationResp)
		return ctx.Result(200, reply)
	}
}

func _NetGraphService_GetParents0_HTTP_Handler(srv NetGraphServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PgIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNetGraphServiceGetParents)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetParents(ctx, req.(*PgIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NetPaginationResp)
		return ctx.Result(200, reply)
	}
}

type NetGraphServiceHTTPClient interface {
	GetChildren(ctx context.Context, req *PgIdReq, opts ...http.CallOption) (rsp *NetPaginationResp, err error)
	GetNetExpand(ctx context.Context, req *NetExpandReq, opts ...http.CallOption) (rsp *NetResp, err error)
	GetNode(ctx context.Context, req *PgIdReq, opts ...http.CallOption) (rsp *NodeResp, err error)
	GetParents(ctx context.Context, req *PgIdReq, opts ...http.CallOption) (rsp *NetPaginationResp, err error)
}

type NetGraphServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewNetGraphServiceHTTPClient(client *http.Client) NetGraphServiceHTTPClient {
	return &NetGraphServiceHTTPClientImpl{client}
}

func (c *NetGraphServiceHTTPClientImpl) GetChildren(ctx context.Context, in *PgIdReq, opts ...http.CallOption) (*NetPaginationResp, error) {
	var out NetPaginationResp
	pattern := "/micros/graph/v1/net/children"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNetGraphServiceGetChildren))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NetGraphServiceHTTPClientImpl) GetNetExpand(ctx context.Context, in *NetExpandReq, opts ...http.CallOption) (*NetResp, error) {
	var out NetResp
	pattern := "/micros/graph/v1/net/expand"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNetGraphServiceGetNetExpand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NetGraphServiceHTTPClientImpl) GetNode(ctx context.Context, in *PgIdReq, opts ...http.CallOption) (*NodeResp, error) {
	var out NodeResp
	pattern := "/micros/graph/v1/net/node"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNetGraphServiceGetNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NetGraphServiceHTTPClientImpl) GetParents(ctx context.Context, in *PgIdReq, opts ...http.CallOption) (*NetPaginationResp, error) {
	var out NetPaginationResp
	pattern := "/micros/graph/v1/net/parents"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNetGraphServiceGetParents))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
