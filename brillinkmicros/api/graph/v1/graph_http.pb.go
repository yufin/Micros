// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.21.12
// source: api/graph/v1/graph.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTreeGraphGetChildren = "/api.rc.v1.TreeGraph/GetChildren"
const OperationTreeGraphGetNodeById = "/api.rc.v1.TreeGraph/GetNodeById"
const OperationTreeGraphGetPathBetween = "/api.rc.v1.TreeGraph/GetPathBetween"
const OperationTreeGraphGetTitleAutoComplete = "/api.rc.v1.TreeGraph/GetTitleAutoComplete"

type TreeGraphHTTPServer interface {
	GetChildren(context.Context, *PgIdReq) (*TreeNodesResp, error)
	GetNodeById(context.Context, *IdReq) (*TreeNodeResp, error)
	GetPathBetween(context.Context, *GetPathReq) (*TreeNodeResp, error)
	GetTitleAutoComplete(context.Context, *TitleAutoCompleteReq) (*TitleAutoCompleteResp, error)
}

func RegisterTreeGraphHTTPServer(s *http.Server, srv TreeGraphHTTPServer) {
	r := s.Route("/")
	r.GET("/micros/graph/v1/tree/node", _TreeGraph_GetNodeById0_HTTP_Handler(srv))
	r.GET("/micros/graph/v1/tree/children", _TreeGraph_GetChildren0_HTTP_Handler(srv))
	r.GET("/micros/graph/v1/tree/title-autocomplete", _TreeGraph_GetTitleAutoComplete0_HTTP_Handler(srv))
	r.GET("/micros/graph/v1/tree/path", _TreeGraph_GetPathBetween0_HTTP_Handler(srv))
}

func _TreeGraph_GetNodeById0_HTTP_Handler(srv TreeGraphHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreeGraphGetNodeById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNodeById(ctx, req.(*IdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TreeNodeResp)
		return ctx.Result(200, reply)
	}
}

func _TreeGraph_GetChildren0_HTTP_Handler(srv TreeGraphHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PgIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreeGraphGetChildren)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChildren(ctx, req.(*PgIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TreeNodesResp)
		return ctx.Result(200, reply)
	}
}

func _TreeGraph_GetTitleAutoComplete0_HTTP_Handler(srv TreeGraphHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TitleAutoCompleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreeGraphGetTitleAutoComplete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTitleAutoComplete(ctx, req.(*TitleAutoCompleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TitleAutoCompleteResp)
		return ctx.Result(200, reply)
	}
}

func _TreeGraph_GetPathBetween0_HTTP_Handler(srv TreeGraphHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPathReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreeGraphGetPathBetween)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPathBetween(ctx, req.(*GetPathReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TreeNodeResp)
		return ctx.Result(200, reply)
	}
}

type TreeGraphHTTPClient interface {
	GetChildren(ctx context.Context, req *PgIdReq, opts ...http.CallOption) (rsp *TreeNodesResp, err error)
	GetNodeById(ctx context.Context, req *IdReq, opts ...http.CallOption) (rsp *TreeNodeResp, err error)
	GetPathBetween(ctx context.Context, req *GetPathReq, opts ...http.CallOption) (rsp *TreeNodeResp, err error)
	GetTitleAutoComplete(ctx context.Context, req *TitleAutoCompleteReq, opts ...http.CallOption) (rsp *TitleAutoCompleteResp, err error)
}

type TreeGraphHTTPClientImpl struct {
	cc *http.Client
}

func NewTreeGraphHTTPClient(client *http.Client) TreeGraphHTTPClient {
	return &TreeGraphHTTPClientImpl{client}
}

func (c *TreeGraphHTTPClientImpl) GetChildren(ctx context.Context, in *PgIdReq, opts ...http.CallOption) (*TreeNodesResp, error) {
	var out TreeNodesResp
	pattern := "/micros/graph/v1/tree/children"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTreeGraphGetChildren))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TreeGraphHTTPClientImpl) GetNodeById(ctx context.Context, in *IdReq, opts ...http.CallOption) (*TreeNodeResp, error) {
	var out TreeNodeResp
	pattern := "/micros/graph/v1/tree/node"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTreeGraphGetNodeById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TreeGraphHTTPClientImpl) GetPathBetween(ctx context.Context, in *GetPathReq, opts ...http.CallOption) (*TreeNodeResp, error) {
	var out TreeNodeResp
	pattern := "/micros/graph/v1/tree/path"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTreeGraphGetPathBetween))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TreeGraphHTTPClientImpl) GetTitleAutoComplete(ctx context.Context, in *TitleAutoCompleteReq, opts ...http.CallOption) (*TitleAutoCompleteResp, error) {
	var out TitleAutoCompleteResp
	pattern := "/micros/graph/v1/tree/title-autocomplete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTreeGraphGetTitleAutoComplete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
