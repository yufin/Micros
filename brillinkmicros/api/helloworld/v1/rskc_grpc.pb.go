// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/helloworld/v1/rskc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rskc_ListReportInfos_FullMethodName  = "/rskc.v1.Rskc/ListReportInfos"
	Rskc_GetReportContent_FullMethodName = "/rskc.v1.Rskc/GetReportContent"
)

// RskcClient is the client API for Rskc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RskcClient interface {
	ListReportInfos(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*ReportInfosResponse, error)
	GetReportContent(ctx context.Context, in *ReportContentRequest, opts ...grpc.CallOption) (*ReportContentResponse, error)
}

type rskcClient struct {
	cc grpc.ClientConnInterface
}

func NewRskcClient(cc grpc.ClientConnInterface) RskcClient {
	return &rskcClient{cc}
}

func (c *rskcClient) ListReportInfos(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*ReportInfosResponse, error) {
	out := new(ReportInfosResponse)
	err := c.cc.Invoke(ctx, Rskc_ListReportInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rskcClient) GetReportContent(ctx context.Context, in *ReportContentRequest, opts ...grpc.CallOption) (*ReportContentResponse, error) {
	out := new(ReportContentResponse)
	err := c.cc.Invoke(ctx, Rskc_GetReportContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RskcServer is the server API for Rskc service.
// All implementations must embed UnimplementedRskcServer
// for forward compatibility
type RskcServer interface {
	ListReportInfos(context.Context, *PaginationRequest) (*ReportInfosResponse, error)
	GetReportContent(context.Context, *ReportContentRequest) (*ReportContentResponse, error)
	mustEmbedUnimplementedRskcServer()
}

// UnimplementedRskcServer must be embedded to have forward compatible implementations.
type UnimplementedRskcServer struct {
}

func (UnimplementedRskcServer) ListReportInfos(context.Context, *PaginationRequest) (*ReportInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportInfos not implemented")
}
func (UnimplementedRskcServer) GetReportContent(context.Context, *ReportContentRequest) (*ReportContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportContent not implemented")
}
func (UnimplementedRskcServer) mustEmbedUnimplementedRskcServer() {}

// UnsafeRskcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RskcServer will
// result in compilation errors.
type UnsafeRskcServer interface {
	mustEmbedUnimplementedRskcServer()
}

func RegisterRskcServer(s grpc.ServiceRegistrar, srv RskcServer) {
	s.RegisterService(&Rskc_ServiceDesc, srv)
}

func _Rskc_ListReportInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RskcServer).ListReportInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rskc_ListReportInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RskcServer).ListReportInfos(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rskc_GetReportContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RskcServer).GetReportContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rskc_GetReportContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RskcServer).GetReportContent(ctx, req.(*ReportContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rskc_ServiceDesc is the grpc.ServiceDesc for Rskc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rskc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rskc.v1.Rskc",
	HandlerType: (*RskcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReportInfos",
			Handler:    _Rskc_ListReportInfos_Handler,
		},
		{
			MethodName: "GetReportContent",
			Handler:    _Rskc_GetReportContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/v1/rskc.proto",
}
