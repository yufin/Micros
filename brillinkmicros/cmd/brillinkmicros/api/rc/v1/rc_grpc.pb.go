// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/rc/v1/rc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rc_CreateRc_FullMethodName = "/api.rc.v1.Rc/CreateRc"
	Rc_UpdateRc_FullMethodName = "/api.rc.v1.Rc/UpdateRc"
	Rc_DeleteRc_FullMethodName = "/api.rc.v1.Rc/DeleteRc"
	Rc_GetRc_FullMethodName    = "/api.rc.v1.Rc/GetRc"
	Rc_ListRc_FullMethodName   = "/api.rc.v1.Rc/ListRc"
)

// RcClient is the client API for Rc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RcClient interface {
	CreateRc(ctx context.Context, in *CreateRcRequest, opts ...grpc.CallOption) (*CreateRcReply, error)
	UpdateRc(ctx context.Context, in *UpdateRcRequest, opts ...grpc.CallOption) (*UpdateRcReply, error)
	DeleteRc(ctx context.Context, in *DeleteRcRequest, opts ...grpc.CallOption) (*DeleteRcReply, error)
	GetRc(ctx context.Context, in *GetRcRequest, opts ...grpc.CallOption) (*GetRcReply, error)
	ListRc(ctx context.Context, in *ListRcRequest, opts ...grpc.CallOption) (*ListRcReply, error)
}

type rcClient struct {
	cc grpc.ClientConnInterface
}

func NewRcClient(cc grpc.ClientConnInterface) RcClient {
	return &rcClient{cc}
}

func (c *rcClient) CreateRc(ctx context.Context, in *CreateRcRequest, opts ...grpc.CallOption) (*CreateRcReply, error) {
	out := new(CreateRcReply)
	err := c.cc.Invoke(ctx, Rc_CreateRc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcClient) UpdateRc(ctx context.Context, in *UpdateRcRequest, opts ...grpc.CallOption) (*UpdateRcReply, error) {
	out := new(UpdateRcReply)
	err := c.cc.Invoke(ctx, Rc_UpdateRc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcClient) DeleteRc(ctx context.Context, in *DeleteRcRequest, opts ...grpc.CallOption) (*DeleteRcReply, error) {
	out := new(DeleteRcReply)
	err := c.cc.Invoke(ctx, Rc_DeleteRc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcClient) GetRc(ctx context.Context, in *GetRcRequest, opts ...grpc.CallOption) (*GetRcReply, error) {
	out := new(GetRcReply)
	err := c.cc.Invoke(ctx, Rc_GetRc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rcClient) ListRc(ctx context.Context, in *ListRcRequest, opts ...grpc.CallOption) (*ListRcReply, error) {
	out := new(ListRcReply)
	err := c.cc.Invoke(ctx, Rc_ListRc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RcServer is the server API for Rc service.
// All implementations must embed UnimplementedRcServer
// for forward compatibility
type RcServer interface {
	CreateRc(context.Context, *CreateRcRequest) (*CreateRcReply, error)
	UpdateRc(context.Context, *UpdateRcRequest) (*UpdateRcReply, error)
	DeleteRc(context.Context, *DeleteRcRequest) (*DeleteRcReply, error)
	GetRc(context.Context, *GetRcRequest) (*GetRcReply, error)
	ListRc(context.Context, *ListRcRequest) (*ListRcReply, error)
	mustEmbedUnimplementedRcServer()
}

// UnimplementedRcServer must be embedded to have forward compatible implementations.
type UnimplementedRcServer struct {
}

func (UnimplementedRcServer) CreateRc(context.Context, *CreateRcRequest) (*CreateRcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRc not implemented")
}
func (UnimplementedRcServer) UpdateRc(context.Context, *UpdateRcRequest) (*UpdateRcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRc not implemented")
}
func (UnimplementedRcServer) DeleteRc(context.Context, *DeleteRcRequest) (*DeleteRcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRc not implemented")
}
func (UnimplementedRcServer) GetRc(context.Context, *GetRcRequest) (*GetRcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRc not implemented")
}
func (UnimplementedRcServer) ListRc(context.Context, *ListRcRequest) (*ListRcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRc not implemented")
}
func (UnimplementedRcServer) mustEmbedUnimplementedRcServer() {}

// UnsafeRcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RcServer will
// result in compilation errors.
type UnsafeRcServer interface {
	mustEmbedUnimplementedRcServer()
}

func RegisterRcServer(s grpc.ServiceRegistrar, srv RcServer) {
	s.RegisterService(&Rc_ServiceDesc, srv)
}

func _Rc_CreateRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServer).CreateRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rc_CreateRc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServer).CreateRc(ctx, req.(*CreateRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rc_UpdateRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServer).UpdateRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rc_UpdateRc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServer).UpdateRc(ctx, req.(*UpdateRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rc_DeleteRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServer).DeleteRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rc_DeleteRc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServer).DeleteRc(ctx, req.(*DeleteRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rc_GetRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServer).GetRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rc_GetRc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServer).GetRc(ctx, req.(*GetRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rc_ListRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcServer).ListRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rc_ListRc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcServer).ListRc(ctx, req.(*ListRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rc_ServiceDesc is the grpc.ServiceDesc for Rc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rc.v1.Rc",
	HandlerType: (*RcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRc",
			Handler:    _Rc_CreateRc_Handler,
		},
		{
			MethodName: "UpdateRc",
			Handler:    _Rc_UpdateRc_Handler,
		},
		{
			MethodName: "DeleteRc",
			Handler:    _Rc_DeleteRc_Handler,
		},
		{
			MethodName: "GetRc",
			Handler:    _Rc_GetRc_Handler,
		},
		{
			MethodName: "ListRc",
			Handler:    _Rc_ListRc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rc/v1/rc.proto",
}
