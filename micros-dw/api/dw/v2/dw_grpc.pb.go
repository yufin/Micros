// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/dw/v2/dw.proto

package dwV2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DwService_GetEnterpriseIdent_FullMethodName       = "/api.dw.v2.DwService/GetEnterpriseIdent"
	DwService_GetEnterpriseInfo_FullMethodName        = "/api.dw.v2.DwService/GetEnterpriseInfo"
	DwService_GetEnterpriseCredential_FullMethodName  = "/api.dw.v2.DwService/GetEnterpriseCredential"
	DwService_GetEnterpriseRankingList_FullMethodName = "/api.dw.v2.DwService/GetEnterpriseRankingList"
	DwService_GetEnterpriseIndustry_FullMethodName    = "/api.dw.v2.DwService/GetEnterpriseIndustry"
	DwService_GetEnterpriseProduct_FullMethodName     = "/api.dw.v2.DwService/GetEnterpriseProduct"
)

// DwServiceClient is the client API for DwService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DwServiceClient interface {
	GetEnterpriseIdent(ctx context.Context, in *GetEntIdentReq, opts ...grpc.CallOption) (*EntIdentResp, error)
	GetEnterpriseInfo(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntInfoResp, error)
	GetEnterpriseCredential(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntCredentialResp, error)
	GetEnterpriseRankingList(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntArrayResp, error)
	GetEnterpriseIndustry(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error)
	GetEnterpriseProduct(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error)
}

type dwServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDwServiceClient(cc grpc.ClientConnInterface) DwServiceClient {
	return &dwServiceClient{cc}
}

func (c *dwServiceClient) GetEnterpriseIdent(ctx context.Context, in *GetEntIdentReq, opts ...grpc.CallOption) (*EntIdentResp, error) {
	out := new(EntIdentResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseIdent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseInfo(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntInfoResp, error) {
	out := new(EntInfoResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseCredential(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntCredentialResp, error) {
	out := new(EntCredentialResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseRankingList(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntArrayResp, error) {
	out := new(EntArrayResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseRankingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseIndustry(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error) {
	out := new(EntStrArrayResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseIndustry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwServiceClient) GetEnterpriseProduct(ctx context.Context, in *GetEntInfoReq, opts ...grpc.CallOption) (*EntStrArrayResp, error) {
	out := new(EntStrArrayResp)
	err := c.cc.Invoke(ctx, DwService_GetEnterpriseProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DwServiceServer is the server API for DwService service.
// All implementations must embed UnimplementedDwServiceServer
// for forward compatibility
type DwServiceServer interface {
	GetEnterpriseIdent(context.Context, *GetEntIdentReq) (*EntIdentResp, error)
	GetEnterpriseInfo(context.Context, *GetEntInfoReq) (*EntInfoResp, error)
	GetEnterpriseCredential(context.Context, *GetEntInfoReq) (*EntCredentialResp, error)
	GetEnterpriseRankingList(context.Context, *GetEntInfoReq) (*EntArrayResp, error)
	GetEnterpriseIndustry(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error)
	GetEnterpriseProduct(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error)
	mustEmbedUnimplementedDwServiceServer()
}

// UnimplementedDwServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDwServiceServer struct {
}

func (UnimplementedDwServiceServer) GetEnterpriseIdent(context.Context, *GetEntIdentReq) (*EntIdentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseIdent not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseInfo(context.Context, *GetEntInfoReq) (*EntInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseInfo not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseCredential(context.Context, *GetEntInfoReq) (*EntCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseCredential not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseRankingList(context.Context, *GetEntInfoReq) (*EntArrayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseRankingList not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseIndustry(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseIndustry not implemented")
}
func (UnimplementedDwServiceServer) GetEnterpriseProduct(context.Context, *GetEntInfoReq) (*EntStrArrayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseProduct not implemented")
}
func (UnimplementedDwServiceServer) mustEmbedUnimplementedDwServiceServer() {}

// UnsafeDwServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DwServiceServer will
// result in compilation errors.
type UnsafeDwServiceServer interface {
	mustEmbedUnimplementedDwServiceServer()
}

func RegisterDwServiceServer(s grpc.ServiceRegistrar, srv DwServiceServer) {
	s.RegisterService(&DwService_ServiceDesc, srv)
}

func _DwService_GetEnterpriseIdent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntIdentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseIdent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseIdent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseIdent(ctx, req.(*GetEntIdentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseInfo(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseCredential(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseRankingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseRankingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseRankingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseRankingList(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseIndustry(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwService_GetEnterpriseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwServiceServer).GetEnterpriseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwService_GetEnterpriseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwServiceServer).GetEnterpriseProduct(ctx, req.(*GetEntInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DwService_ServiceDesc is the grpc.ServiceDesc for DwService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DwService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dw.v2.DwService",
	HandlerType: (*DwServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnterpriseIdent",
			Handler:    _DwService_GetEnterpriseIdent_Handler,
		},
		{
			MethodName: "GetEnterpriseInfo",
			Handler:    _DwService_GetEnterpriseInfo_Handler,
		},
		{
			MethodName: "GetEnterpriseCredential",
			Handler:    _DwService_GetEnterpriseCredential_Handler,
		},
		{
			MethodName: "GetEnterpriseRankingList",
			Handler:    _DwService_GetEnterpriseRankingList_Handler,
		},
		{
			MethodName: "GetEnterpriseIndustry",
			Handler:    _DwService_GetEnterpriseIndustry_Handler,
		},
		{
			MethodName: "GetEnterpriseProduct",
			Handler:    _DwService_GetEnterpriseProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dw/v2/dw.proto",
}
