// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"micros-graph/internal/biz"
	"micros-graph/internal/conf"
	"micros-graph/internal/data"
	"micros-graph/internal/server"
	"micros-graph/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db, cleanup, err := data.NewGormDb(confData)
	if err != nil {
		return nil, nil, err
	}
	mongoDb, cleanup2, err := data.NewMongoDb(confData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	nebulaDb, cleanup3, err := data.NewNebulaDb(confData)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dataData := data.NewData(db, mongoDb, nebulaDb)
	dwEnterpriseRepo := data.NewDwEnterpriseRepo(dataData, logger)
	dwEnterpriseUsecase := biz.NewDwEnterpriseUsecase(dwEnterpriseRepo, logger)
	dwdataServiceServicer := service.NewDwdataServiceServicer(dwEnterpriseUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, dwdataServiceServicer, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
