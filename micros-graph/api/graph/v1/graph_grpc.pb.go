// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/graph/v1/graph.proto

package microsgraphv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GraphService_GetEdge_FullMethodName         = "/api.graph.v1.GraphService/GetEdge"
	GraphService_GetEdges_FullMethodName        = "/api.graph.v1.GraphService/GetEdges"
	GraphService_GetEdgesByProps_FullMethodName = "/api.graph.v1.GraphService/GetEdgesByProps"
	GraphService_GetNode_FullMethodName         = "/api.graph.v1.GraphService/GetNode"
	GraphService_GetNodes_FullMethodName        = "/api.graph.v1.GraphService/GetNodes"
	GraphService_GetNodesByProps_FullMethodName = "/api.graph.v1.GraphService/GetNodesByProps"
	GraphService_GetChildren_FullMethodName     = "/api.graph.v1.GraphService/GetChildren"
)

// GraphServiceClient is the client API for GraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphServiceClient interface {
	// Edges
	GetEdge(ctx context.Context, in *GetEdgeReq, opts ...grpc.CallOption) (*EdgeResp, error)
	GetEdges(ctx context.Context, in *GetEdgesReq, opts ...grpc.CallOption) (*EdgesResp, error)
	GetEdgesByProps(ctx context.Context, in *GetEdgesByPropsReq, opts ...grpc.CallOption) (*EdgesResp, error)
	// Nodes
	GetNode(ctx context.Context, in *GetNodeReq, opts ...grpc.CallOption) (*NodeResp, error)
	GetNodes(ctx context.Context, in *GetNodesReq, opts ...grpc.CallOption) (*NodesResp, error)
	GetNodesByProps(ctx context.Context, in *GetNodesByPropsReq, opts ...grpc.CallOption) (*NodesResp, error)
	// Net
	GetChildren(ctx context.Context, in *GetChildrenReq, opts ...grpc.CallOption) (*NetResp, error)
}

type graphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphServiceClient(cc grpc.ClientConnInterface) GraphServiceClient {
	return &graphServiceClient{cc}
}

func (c *graphServiceClient) GetEdge(ctx context.Context, in *GetEdgeReq, opts ...grpc.CallOption) (*EdgeResp, error) {
	out := new(EdgeResp)
	err := c.cc.Invoke(ctx, GraphService_GetEdge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetEdges(ctx context.Context, in *GetEdgesReq, opts ...grpc.CallOption) (*EdgesResp, error) {
	out := new(EdgesResp)
	err := c.cc.Invoke(ctx, GraphService_GetEdges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetEdgesByProps(ctx context.Context, in *GetEdgesByPropsReq, opts ...grpc.CallOption) (*EdgesResp, error) {
	out := new(EdgesResp)
	err := c.cc.Invoke(ctx, GraphService_GetEdgesByProps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetNode(ctx context.Context, in *GetNodeReq, opts ...grpc.CallOption) (*NodeResp, error) {
	out := new(NodeResp)
	err := c.cc.Invoke(ctx, GraphService_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetNodes(ctx context.Context, in *GetNodesReq, opts ...grpc.CallOption) (*NodesResp, error) {
	out := new(NodesResp)
	err := c.cc.Invoke(ctx, GraphService_GetNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetNodesByProps(ctx context.Context, in *GetNodesByPropsReq, opts ...grpc.CallOption) (*NodesResp, error) {
	out := new(NodesResp)
	err := c.cc.Invoke(ctx, GraphService_GetNodesByProps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetChildren(ctx context.Context, in *GetChildrenReq, opts ...grpc.CallOption) (*NetResp, error) {
	out := new(NetResp)
	err := c.cc.Invoke(ctx, GraphService_GetChildren_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServiceServer is the server API for GraphService service.
// All implementations must embed UnimplementedGraphServiceServer
// for forward compatibility
type GraphServiceServer interface {
	// Edges
	GetEdge(context.Context, *GetEdgeReq) (*EdgeResp, error)
	GetEdges(context.Context, *GetEdgesReq) (*EdgesResp, error)
	GetEdgesByProps(context.Context, *GetEdgesByPropsReq) (*EdgesResp, error)
	// Nodes
	GetNode(context.Context, *GetNodeReq) (*NodeResp, error)
	GetNodes(context.Context, *GetNodesReq) (*NodesResp, error)
	GetNodesByProps(context.Context, *GetNodesByPropsReq) (*NodesResp, error)
	// Net
	GetChildren(context.Context, *GetChildrenReq) (*NetResp, error)
	mustEmbedUnimplementedGraphServiceServer()
}

// UnimplementedGraphServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGraphServiceServer struct {
}

func (UnimplementedGraphServiceServer) GetEdge(context.Context, *GetEdgeReq) (*EdgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdge not implemented")
}
func (UnimplementedGraphServiceServer) GetEdges(context.Context, *GetEdgesReq) (*EdgesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdges not implemented")
}
func (UnimplementedGraphServiceServer) GetEdgesByProps(context.Context, *GetEdgesByPropsReq) (*EdgesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdgesByProps not implemented")
}
func (UnimplementedGraphServiceServer) GetNode(context.Context, *GetNodeReq) (*NodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedGraphServiceServer) GetNodes(context.Context, *GetNodesReq) (*NodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedGraphServiceServer) GetNodesByProps(context.Context, *GetNodesByPropsReq) (*NodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodesByProps not implemented")
}
func (UnimplementedGraphServiceServer) GetChildren(context.Context, *GetChildrenReq) (*NetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildren not implemented")
}
func (UnimplementedGraphServiceServer) mustEmbedUnimplementedGraphServiceServer() {}

// UnsafeGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphServiceServer will
// result in compilation errors.
type UnsafeGraphServiceServer interface {
	mustEmbedUnimplementedGraphServiceServer()
}

func RegisterGraphServiceServer(s grpc.ServiceRegistrar, srv GraphServiceServer) {
	s.RegisterService(&GraphService_ServiceDesc, srv)
}

func _GraphService_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEdgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_GetEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetEdge(ctx, req.(*GetEdgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEdgesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_GetEdges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetEdges(ctx, req.(*GetEdgesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetEdgesByProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEdgesByPropsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetEdgesByProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_GetEdgesByProps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetEdgesByProps(ctx, req.(*GetEdgesByPropsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetNode(ctx, req.(*GetNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetNodes(ctx, req.(*GetNodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetNodesByProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesByPropsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetNodesByProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_GetNodesByProps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetNodesByProps(ctx, req.(*GetNodesByPropsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildrenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_GetChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetChildren(ctx, req.(*GetChildrenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphService_ServiceDesc is the grpc.ServiceDesc for GraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.graph.v1.GraphService",
	HandlerType: (*GraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEdge",
			Handler:    _GraphService_GetEdge_Handler,
		},
		{
			MethodName: "GetEdges",
			Handler:    _GraphService_GetEdges_Handler,
		},
		{
			MethodName: "GetEdgesByProps",
			Handler:    _GraphService_GetEdgesByProps_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _GraphService_GetNode_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _GraphService_GetNodes_Handler,
		},
		{
			MethodName: "GetNodesByProps",
			Handler:    _GraphService_GetNodesByProps_Handler,
		},
		{
			MethodName: "GetChildren",
			Handler:    _GraphService_GetChildren_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/graph/v1/graph.proto",
}
