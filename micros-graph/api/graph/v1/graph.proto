syntax = "proto3";

package api.graph.v1;

import "google/protobuf/struct.proto";
//import "google/api/annotations.proto";
//import "google/protobuf/empty.proto";

option go_package = "micros-graph/api/graph/v1;microsgraphv1";
option java_multiple_files = true;
option java_outer_classname = "MicrosGraphV1";
option java_package = "api.microsgraph.v1";


service GraphService {
//  Edges
  rpc GetEdge(GetEdgeReq) returns (EdgeResp) {
  }

  rpc GetEdges(GetEdgesReq) returns (EdgesResp) {
  }

  rpc GetEdgesByProps(GetEdgesByPropsReq) returns (EdgesResp) {
  }

// Nodes
  rpc GetNode(GetNodeReq) returns (NodeResp) {
  }

  rpc GetNodes(GetNodesReq) returns (NodesResp) {
  }

  rpc GetNodesByProps(GetNodesByPropsReq) returns (NodesResp) {
  }

//  Net
  rpc GetChildren(GetChildrenReq) returns (NetResp) {
  }

}

message PaginationReq {
  int64 page_num = 1;
  int64 page_size = 2;
}

message GetNodeReq {
  int64 id = 1;
}

message GetNodesReq {
  repeated int64 ids = 1;
}

message GetNodesByPropsReq {
  repeated string label_scope = 1;
  google.protobuf.Struct props = 2;
  PaginationReq pagination = 3;
}

message GetEdgeReq {
  int64 source_id = 1;
  int64 target_id = 2;
  string rel_type = 3;
  int64 rank = 4;
}

message GetEdgesReq {
  int64 source_id = 1;
  int64 target_id = 2;
  string rel_type = 3;
  PaginationReq pagination = 4;
}

message GetEdgesByPropsReq {
  int64 source_id = 1;
  int64 target_id = 2;
  string rel_type = 3;
  google.protobuf.Struct props = 4;
  PaginationReq pagination = 5;
}

message GetChildrenReq {
  int64 source_id = 1;
  repeated string label_scope = 2;
  repeated string rel_type_scope = 3;
  PaginationReq pagination = 4;
}

message Node {
  int64 vid = 1;
  repeated string labels = 2;
  google.protobuf.Struct properties = 3;
}

message Edge {
  int64 sourceId = 1;
  int64 targetId = 2;
  string label = 3;
  int64 rank = 4;
  google.protobuf.Struct properties = 5;
}

message Net {
  repeated Node nodes = 1;
  repeated Edge edges = 2;
}


message NodeResp {
  bool success = 1;
  int32 code = 2;
  string message = 3;
  Node data = 4;
}

message EdgeResp {
  bool success = 1;
  int32 code = 2;
  string message = 3;
  Edge data = 4;
}

message NetResp {
  bool success = 1;
  int32 code = 2;
  string message = 3;
  int64 total = 4;
  int64 offset = 5;
  Net data = 6;
}

message NodesResp {
  bool success = 1;
  int32 code = 2;
  string message = 3;
  int64 total = 4;
  int64 offset = 5;
  repeated Node data = 6;
}

message EdgesResp {
  bool success = 1;
  int32 code = 2;
  string message = 3;
  int64 total = 4;
  int64 offset = 5;
  repeated Edge data = 6;
}
